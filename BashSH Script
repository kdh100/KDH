1. Shell CMD
	* grep $OPTION $PATTERN $FILE
		- -i : 대소문자 상관없이
		- -v : 제외
		- -n : 라인 넘버
		- -l : 파일 리스트
		- -w : 단어 지정
	* 정규 표현식(regular expression; regex)
		- * : 앞 문자를 0번 이상 반복
		- . : 1문자
		- ? : 앞 문자를 0(없거나)~1(있거나) 반복
		- {m} : 앞 문자가 m 번 반복
		- {m,n} : 앞 문자가 m 번 이상 n 번 이하 반복
		- [abc] : 선택적인 1문자
		- [^a] : 제외시킬 1문자
		- ^root : 라인의 처음 매칭
		- root$ : 라인의 끝 매칭
	* fgrep(grep -F), egrep(grep -E)
	* sed $OPTION 'address|/pattern/CMD' $FILE
		- -n : 전체 정보 미출력
		- -i : 치환된 출력을 현재 파일에 바로 적용
		- address : 범위(ex_ 1,3 or 3)
		- /pattern/ : 정규 표현식 사용가능
			\ 패턴 내 변수를 사용할 경우 ''(single) 이 아닌 ""(double) 을 사용
		- CMD
			# p : 출력
			# d : 제외하고 출력(-n 같이 쓰면 출력값 없음)
			# s///g : 치환(address's'/검색/치환/g)
				~ g : 전역 치환, 검색 패턴에 대해 행,열 모두 치환됨
				~ pattern 내 문자열에 / 가 포함된 경우 #, ; 으로 pattern 구분 가능
	* awk $OPTIOM $STATEMENT '{action}' $FILE
		- -F# : 필드 구분자
		- $# : 0 은 전체, 1* 은 필드 번호
		- 'regex' 를 사용하여 특정 검색(=grep)할 수 있음
		- action 내 문자열 등 사용 시 "" 사용
		- action 내 필드 구분은 , 혹은 "" 사용
		- statement : regex 형식의 패턴, Condition 등...(C 언어 형식)
	* sort $OPTION $FILE (+ uniq CMD)
		- -u : 중복값이 있을 경우 한번만 출력
		- -r : 오름차순 정렬
		- -n : 숫자값 기준 정렬
		- uniq
			# -d : 중복값만 출력
			# -u : 단독값만 출력
	* cut $OPTIOM $FILE
		- -c($-$) : 숫자 범위만큼의 문자만 출력
			# 앞의 범위 생략시 1 부터 시작
			# 뒤의 범위 생략시 앞의 범위만큼 생략하고 나머지 출력
		- -d : 필드 구분자
		- -f : 필드 번호
	* tr "검색문자" "변환문자"
		- 검색문자의 길이를 기준으로 변환문자가 1:1 대칭되어 변환
	* split -d -l $NUM $FILE
		- 파일을 읽어 지정한 라인 개수 만큼 파일을 분리하여 새로 저장(현재 디렉토리)
		- -d : 10진수 
			# 저장되는 신규 파일의 이름 형식을 10진수 형태로 생성
		- -l : 라인 개수
	* paste $FILE1 $FILE2
		- 파일1 과 파일2 의 내용을 열(column) 방식으로 붙여서 출력
	* head|tail $OPTION $FILE
		- 출력 내용의 최상단 라인 기준 라인 개수만큼(기본 라인개수 10개)만 출력
		- -n : 라인 개수
			# -N : 최상단 라인 기준에서 개수만큼만 표시
			# head -n +N : 마지막 라인 기준에서 개수만큼 제외하고 표시
			# tail -n +N : 최상단 라인 기준에서 개수만큼 제외하고 표시
	* wc $OPTION $FILE
		- -l : 파일의 총 행(line) 개수
		- -w : 파일의 총 단어(word) 개수
		- -c : 파일의 총 문자(character) 개수
2. Shell 특성
	* Redirection
		- stdin(keyboard input) : 0
			# mailx -s "[ OK ] server1" admin@example.com < report.txt
		- stdout(screen output) : 1
			# ps -ef | grep httpd | wc -l > httpd.count
		- stderr(screen error message output) : 2
			# find / -name core -type f 2>/dev/null
	* Pipe
		- CMD | CMD
		- 앞의 CMD 결과를 뒤의 CMD 인자로 입력
			# fsck -y /dev/sdb1 2>&1 | tee -a fsck.log
				~ tee : 출력값을 파일로 생성
				~ -a : 내용 추가
3. Variable(변수)
	* 변수 종류
		- 지역변수 : VAR=5
		- 환경변수 : export VAR=5
		- 특수변수 : $, ?, !, *, #, @, ...
	* 변수 선언
		- 선언 : VAR=5 ; export VAR
			# 현재 쉘 뿐만 아니라 다른 쉘에서도 해당 변수가 적용됨
		- 확인 : echo $VAR
			# 선언된 변수는 사용 시 반드시 변수 앞에 '$' 추가
		- 해제 : unset VAR
	* 특수변수
		- $$ : 현재 PID 번호(ex_ 임시파일 생성 시 사용)
		- $! : 바로 이전에 수행된 백그라운드 프로세스 PID 번호
		- $? : 바로 이전에 수행된 명령어의 return 값(0 ~ 255; 0 은 정상종료)
		- $*, $@ : 모든 인자
		- $# : 인자 개수
		- $0 : 프로그램 이름
		- $'N' : 'N'째 인자
	* 메타캐릭터(Metacharacter)
		- '' : 쉘이 해석할 수 없도록 차단
		- "" : 쉘이 해석할 수 없도록 차단(except $, ``, \)
		- `` : CMD
		- \ : escape character
		- ; : 한 라인에 여러개의 CMD 수행
	* 별칭(Alias)
		- alias $NAME='CMD'
		- alias $NAME
		- unalias $NAME
	* 대표적인 환경파일
		- /etc/profile
		- ~/.bash_profile
		- ~/.bashrc
	* Here Documentation
		- 
	* 그룹화(Grouping)
		- 
	* 조건부실행(Condition Execution)
		- 
	* 경로(File/Directory Path)
		- 
















