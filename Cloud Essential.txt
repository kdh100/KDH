1. 클라우드 관리
    * 수동
        - AWS 관리 콘솔
        - AWS API
        - AWS CLI
    * 자동
        - CloudFormation(Infrastructure as Code; 소스 제어 시스템에 저장된 템플릿)
            # Infrastructure as Code
                ~ 간편한 유지관리
                ~ 손쉬운 보안 설정
                ~ 신속한 설계 가능
                ~ 뛰어난 확장성
2. AWS 클라우드
    * 필요한 만큼한 사용하고 사용한 만큼만 비용 지불
    * EC2 를 활용한 서버-클라이언트 구조(클라우드 컴퓨팅 배포) 구축 가능
        - EC2(Elastic Compute Cloud) : 가상 서버
        - 클라우드 컴퓨팅 배포
            # 클라우드 배포 : 모든 리소스가 클라우드 기반
            # 온프레미스 배포 : 프라이빗 클라우드 배포, 기존 물리 방식
            # 하이브리드 배포 : 온프레미스 인프라 리소스 + 클라우드 리소스
                ~ Outposts 서비스
    * 장점
        - 불가피한 선행 비용 -> 가변 비용(훨씬저렴)
        - 규모가 커질수록 가변 비용이 축소(할인가능)
        - 용량 추정 불필요(자동확장)
        - 빠른 속도(유연함)
        - 장비 관리 불필요(유지비용X)
        - 전세계 확장성(리전별 자체 IDC 존재)
3. 요금
    [요금 정책]
    * 온디맨드
        - 사용한 만큼 지불
        - 불규칙적 단기 워크로드에 적합
    * 예약 인스턴스
        - 온디맨드 결제 할인 옵션
        - 표준, 컨버터블 예약을 1년/3년 약정
        - 약정 기간 끝나면 온디맨드로 변환됨
    * 스팟 인스턴스
        - 미사용중인 EC2 리소스를 사용하여 온디맨드 요금의 최대 90% 절감
        - 시작/중단/종료가 자유로운 워크로드에 적합
            # 리소스가 없거나 사용불가, 수요가 늘면 인스턴스 중단될 수 있음
                ~ 종료 2분 전 알람 발생
    * 전용 호스트
        - 물리 서버
    * 프리 티어
        - 상시무료, 12개월무료, 평가판
    * Savings Plans
        - 사용량을 1년/3년 약정, 온디맨드 요금의 최대 72% 절감
        - 약정 사용량까지는 Savings Plans, 초과 사용량은 온디맨드
    * Cost Explorer
        - AWS 비용, 사용량을 시각화하고 관리하는 서비스
            # 여러가지 그룹화(서비스별, 리전별 등) 제공 및 사용자 임의 태그를 통한 그룹화 가능
            # 태그는 키-값 페어(NRDS; DynamoDB)를 기준
            # 보고서 작성에 특화된 기본값 외 사용자 정의 보고서 작성 제공
            # Savings Plans 를 위한 맞춤 권장 사항 제공 가능
    * Pricing Calculator
        - AWS 서비스를 탐색, 사용 사례에 대한 비용을 추정해 정의된 그룹별로 구성 가능
    * Billings(결제)
        - 요금 결제 및 요금 관리 대시보드
    * Solidate Billings(통합 결제)
        - 다중 AWS 계정으로 Organizations 으로 통합하여 조직 소유자의 계정에 통합 결제를 진행
            # 대량 할인(Bulk Discount) 가능
            # Saving Plans 및 예약 인스턴스 공유 가능
    * Budget(예산)
        - 예산을 생성, 서비스 사용/비용 및 인스턴스 예약을 계획 가능
            # 하루 세 번 업데이트되어 정확한 예산 측정 가능
            # 예산 금액 임계치 설정으로 일정 수준의 예산 초과 예정 혹은 초과 시 알람 발생 가능
    [고객 지원]
    * AWS Support(고객 지원)
        - Basic
            # 모든 고객에게 무료 제공되는 고객 지원 서비스
                ~ 24시간 고객 서비스(문서/백서 지원 및 지원 포럼 포함)
                ~ Trusted Advisor
                ~ Personal Health Dashboard(무료 대시보드)
        - Developer
            # Basic + 고객지원팀 이메일 답변 수신(평시 24시간 내, 장애시 12시간 내)
        - Business
            # Developer + 고객지원팀 전화 답변 수신(장애시 4시간 내, 시스템 다운 시 1시간 내)
                ~ 모든 항목에 대한 Trushted Advisor 검사 지원 가능
        - Enterprise
            # Business + 전화 답변 수신(모든 장애 15분 내) + 전담 기술자(TAM), AWS 전문가 지원
                ~ TAM(Technical Account Mananger) : Well-Architeched 검토, 운영 및 이벤트 관리
                ~ Well-Architeced : 운영 우수성, 보안성, 안정성, 성능효율성, 비용최적화 검사
                ~ 고객 전담 기술전문가로써 문제 뿐만 아니라 고객의 전반적인 지원 담당자
    * Marketplace
        - ISV(Independent Software Vendor)의 S/W 수천 개가 포함된 디지털 카탈로그
            # 검색, 평가, 구매 가능
                ~ 비지니스 어플리케이션, 데이터 및 분석 정보, 마이그레이션, 보안 등
4. EC2
    * 시작 & 연결
        - 인스턴스 시작
            # OS, APP 등이 포함된 기본 구성 템플릿 선택 가능
            # 인스턴스 유형에서 하드웨어 구성 변경 가능
            # In/Out 네트워크 트래픽 보안 설정 지정
        - 인스턴스 연결
            # 프로그램 등에 직연동하여 데이터 교환
            # 하이퍼터미널 등을 통해 인스턴스에 직접 엑세스 가능
    * 유형
        - 범용
            # 기본
                ~ 웹서버, 컨테이너식 MSA(Micro-Service Architecture) 등
        - 컴퓨팅 최적화
            # 고성능 처리
                ~ 머신러닝, 배치 처리등
        - 메모리 최적화
            # 방대한 데이터 처리
                ~ 빅데이터 분석, 고성능 DB 등
        - 스토리지 최적화
            # 고성능 IOPS(초당 입출력 수; 스토리지 성능 지표) 처리
                ~ 데이터 웨어하우징, 비관계형 DB(DynamoDB) 등
        - 엑셀러레이티드
            # 데이터 처리 가속화
                ~ 비디오 인코딩, 스트리밍 등
    * EC2 Auto Scaling
        - 수직/수평적 자동 확장 서비스
            # 수직 : 인스턴스 리소스 업/다운그레이드
            # 수평 : 인스턴스 개수 추가/삭제
        - 조정 정책
            # 조정 방식
                ~ 동적 조정 : CloudWatch 지표 및 알람 설정 --> Auto Scaling 작업 트리거
                ~ Auto Scaling 자체적으로도 조정 가능(내결함성 확장 구성 혹은 정적 확장 구성)
            # 정책 유형
                ~ 단순 조정 : 그룹 용량 늘리거나 줄이기, 추가 알람에 대한 대응 X
                ~ 단계 조정 : 그룹 용량 늘리거나 줄이기, 추가 알람에 대한 대응 O
                ~ 대상 추적 : 특정 지표 목표값에 따라 용량 늘리거나 줄이기
        - 예측 조정
            # 머신러닝을 통해 학습한 후 미리 예측한 수요에 따라 인스턴스 자동 예약
                ~ 머신러닝을 위한 데이터는 CloudWatch 를 통해서 충당
        - 설정
            # 최소 용량(Minimum capacity)
                ~ 최소 인스턴스 설정
            # 희망 용량(Desired capacity)
                ~ 희망 인스턴스 설정(없으면 최소 용량과 동일)
            # 최대 용량(Maximum capacity)
                ~ 최대 인스턴스 설정(필요시 자동 확장되는 범위)
    * ELB(Elastic Load Blancing)
        - '외부 트래픽 > ELB > Auto Scaling' 구조
            # 외부 인터넷 트래픽에 대해서 수신 받고 내부 사설 네트워크로 연결해줄 수 있음
        - 프론트앤드는 물론 백앤드에서도 적용되는 리전 형태
        - 상태 확인을 통해 리소스 사용 여부 체크
            # API 응답 코드를 통해 확인(200; OK, 503; 리소스 사용불가 -> 다른 리소스로 라우팅)
        - 주요 구성요소
            # Listener(리스너)
                ~ 연결 요청 확인 프로세스
                ~ 프로토콜 및 포트 구성
            # Target Group(대상 그룹)
                ~ EC2 인스턴스, Lambda 함수 또는 IP 주소 같은 리소스 모음
            # Policy(규칙)
                ~ 대상 그룹 <-> 리스너 연결 규칙
    * SQS(Simple Queue Service)
        - 모놀리식 어플리케이션 서비스의 단점
            # 밀결합된 구성요소 구조로 한 요소의 장애가 전체 장애로 발전 가능
        - 마이크로 어플리케이션 서비스 접근 방식 사용
            # 구성요소 간의 Payload(데이터가 포함된 메시지) 전송/처리 보조
            # 대기열(Queue) 방식으로 메시지를 전송/저장/검색 가능
    * SNS(Simple Notification Service)
        - 게시/구독 서비스
            # 게시자는 그룹화된 주제에 따라 메시지 전달
            # 구독자는 구독한 그룹의 주제에 따라 메시지 수신
                ~ 일반 사용자(A2P), 다른 어플리케이션(A2A)
5. 서버리스 컴퓨팅
    * EC2 는 지속적으로 인스턴스 관리를 해줘야하는 번거로움이 있음
    * 오로지 어플리케이션(코딩)만 신경쓰고 나머지는 자동으로 처리
    * Lambda
        - 단순 서비스(코드)만 실행할 수 있는 서비스
            # 이벤트 소스에서 트리거되도록 설정하여 필요시에만 실행되게 함
        - 서비스(코드)를 실행한 동안만 요금 부과
    * ECS(Elastic Contrainer Service)
        - Docker 를 사용한 컨테이너 관리 서비스
            # Container 란 어플리케이션 코드, 종속성을 하나의 객체로 패키지한 것
        - EC2 에서도 사용 가능
    * EKS(Elastic Kubernetes Service)
        - Kubernetes 를 사용한 컨테이너 관리 서비스
        - EC2 에서도 사용 가능
    * Fargate
        - 컨테이너 서비스(ECS, EKS)에 적합한 컴퓨팅 시스템
6. 글로벌 인프라(리전)
    * 선택사항
        - 거버넌스(정부 지침) 및 법적 요구사항 준수
        - 접근성
        - 기능 가용성
        - 요금
    * AZ(Available Zone; 가용영역)
        - 리전 내 단일 IDC 혹은 IDC 그룹
            # 리전 내 AZ 포함
        - 인스턴스를 다른 AZ 에 분산시켜서 운용하여 HA(High Availability) 충족
    * 엣지 로케이션
        - 리전과 물리적으로 멀리 떨어진 곳의 새로운 가용영역
        - Outposts 를 사용하면 자체 로컬에 AWS 리소스를 그대로 사용하듯 구축 가능
        - CloudFront(CDN 서비스) 를 통해 리전의 데이터 사본을 고객에서 캐싱
            # Origin : 파일을 가져오는 서버
7. 인터페이스
    * Management Console
        - 웹 GUI 기반의 수동 관리 인터페이스
    * CLI(Command Line Interface)
        - 자동 관리를 위한 API 요청을 수행하는 시간을 절약해주는 서비스
        - API(Application Programing Interface)
            # 어플리케이션의 자동 실행을 구현하는 인터페이스
            # 코드로 자동 관리/실행이 가능
    * SDK(Software Development Kit)
        - 소프트웨어 개발 키트
    * CDK(Cloud Development Kit)
        - 일반적인 프로그래밍 언어를 사용하여 어플리케이션 개발 및 프로비저닝 프레임워크
    * Solution Library
        - AWS + AWS 파트너사가 구축한 인프라 배포 툴
            # CloudFormation 템플릿, 스크립트, 참조 아키텍쳐 등 필요한 시작 도구 포함
    * Elastic Beanstalk
        - 자동 인스턴스 프로비저닝을 위한 서비스
        - 사용자가 코드 및 구성 설정을 제공하면 자동 구성
            # 용량 조정
            # 로드 밸런싱
            # 자동 조정
            # 모니터링
                ~ Java, Node.js, Python, PHP, .NET, Ruby 언어 지원
    * CloudFormation
        - 자동 인스턴스 프로비저닝을 위한 서비스
            # 템플릿, 스택을 통해 어플리케이션 모델, 배포, 설정, 관리 가능
                ~ 템플릿 : .json 포맷의 텍스트 파일로 어플리케이션에 필요한 모든 AWS 리소스 정의
                ~ 스택 : 템플릿이 실행될 때 만들어지는 AWS 리소스들의 단일 유닛 형태의 집합 구성
        - 버전 관리를 통해 오류 감지 시 변경 사항을 자동으로 롤백
    * Kinesis
        - 실시간 어플리케이션 데이터 스트림 수집/처리/분석 툴
            # Data Streams
                ~ 스트림 생성 -> 샤드 수 지정(각 샤드당 1Mbps in, 2Mbps out 제한)
                ~ 스트림 총량 = 샤드 합계
            # Data Firehose
                ~ 버퍼링 구성 -> S3 버킷에 데이터 전송 -> 연결한 엔드포인트로 전송
    * Step Functions
        - 어플리케이션 기능을 단계별로 시작하고 추적하며 로깅을 제공하는 시각적 워크플로 툴
            # 상태 머신
                ~ 특정 조건에 의존하는 일련의 작동 조건을 가진 객체
                ~ .json 기반의 텍스트 조건 구조
8. 네트워크
    * VPC(Virtual Private Cloud)
        - 서브넷으로 섹션을 격리하여 리소스를 배치하고 사용할 수 있는 서비스
            # 각 리전 당 최대 5개의 VPC 생성 가능
            # 각 서브넷은 단 1개의 라우팅 테이블만을 참고
        - 게이트웨이를 통해 VPC 로 트래픽 송수신
            # AWS 측 Virtual Private Gateway 를 통해 Site-to-Site VPN 가능
                ~ 시간 당 연결 요금 발생
                ~ 최초 100GB 는 무료
    * VPC Endpoint
        - 인터넷 게이트웨이 없이 AWS 서비스와 마치 직연동된 것 처럼 통신하게 하는 기능
            # Gateway, Interface
    * VPC Peering
        - Point to Point 형태로 서로 다른 VPC 네트워크를 연결시켜주는 기능
            # A <-> B <-> C 라고 해서 A <-> C 아님
        - 서로 다른 IP CIDR 대역끼리 연결이 가능하고, 리전 별 연결도 가능
            # ping 은 동일 대역이 아닐 경우 불가능
    * IGW(Internet Gateway)/NAT(Network Address Translation)
        - VPC 내 AZ 안에있는 서브넷의 종류는 2가지
            # 퍼블릭 : IGW 로 가는 라우팅 테이블과 연결되어있는 서브넷
            # 프라이빗 : 기본 서브넷 + NAT 로 가는 라우팅 테이블과 연결되어있는 서브넷
        - 프라이빗은 NAT 를 향해 트래픽 전달 -> NAT 는 IGW 를 향해 트래픽 전달 -> IGW 는 외부 인터넷 통신
    * EIP(Elastic IP)
        - 클라우드 컴퓨팅을 위해 설계된 고정 공인 IP
            # 사용 시 비용 청구됨
            # 5 개 개수 제한
    * ENI(Elastic Network Interface)
        - 가상 네트워크 카드
            # 해당 카드에 설정값을 그대로 가진 채로 인스턴스에 attach|detach 가능
    * Direct Connect
        - B2B 전용 회선
        - 별도의 리전 내 전용 회선 팀과 상의하여 물리 회선 제공받아야 함
    * ACL(Access Control List)
        - VPC 를 구성할 때 기본 네트워크 ACL 이 포함되어있음
            # 사용자 지정 ACL 생성 적용 가능
            # ACL 은 항상 적용되는 가상 방화벽으로 상태 비저장 필터링 제공
    * 보안 그룹
        - EC2 생성시 기본 보안 그룹에 모두 포함되어있음
            # 기본값은 인트래픽 거부, 아웃트래픽 허용
            # 사용자 지정 규칙을 추가 적용 가능
            # 상태 저장 필터링 제공
    * NAT
        - 프라이빗 서브넷 트래픽을 인터넷에 연결시키기 위한 IP 변환 장비
            # 퍼블릭 서브넷에 인스턴스 형태로 설치
                ~ 프라이빗 -> NAT(퍼블릭) -> IGW -> 인터넷
    * Route 53(DNS 서비스)
        - AWS 자체 DNS 서비스로 다양한 컴퓨팅 시스템에서 사용 가능
        - 호스팅 방식
            # 퍼블릭 호스팅 : 인터넷 이름 해석
            # 프라이빗 호스팅 : VPC 내부에서 이름 해석
        - 라우팅 정책
            # 단순
                ~ 도메인 지정값 기준 기능 수행
            # 장애 조치
                ~ Active-Standby 장애 조치 구성
            # 지리적 위치
                ~ 사용자 위치를 기준으로 트래픽 라우팅
            # 지리 근접
                ~ 리소스 위치를 기준으로 트래픽 라우팅
            # 지연 시간
                ~ 다중 리전에 리소스가 있을 때 좀 더 짧은 지연시간 기준으로 라우팅
            # 다중 값 응답
                ~ 무작위 선택된 최대 8개의 정상 레코드로 DNS 쿼리 응답
            # 가중치 기반
                ~ 트래픽을 지정한 비율에 맞춰 리소스를 분배하여 라우팅
                ~ (A:3) : (B:7) --> A 는 3만큼만, B는 7만큼만
    * CloudFront(CDN 서비스)
        - AWS 자체 백본 네트워크를 통해 엣지 로케이션으로 사용자 요청으로 라우팅 및 컨텐츠 배포
            # 파일(객체; Objects)의 사본은 전 세계 여러 엣지 로케이션에 캐싱되어 안전
                ~ 컨텐츠가 이미 캐시되어 있으며 TTL 이 만료되지 않았으면 바로 요청자에게 전송
            # 컨텐츠 전송 성능 개선 기능
                ~ TCP 최적화 : 트래픽 전송 속도 확인 후 같은 값으로 성능 개선
                ~ TLS(1.3) 지원 : 더 빠르게 더 안전하게
                ~ 동적 컨텐츠 배치 : API 같은 동적 컨텐츠 제공 가능
                ~ 캐싱 전략 정의 : 적절한 TTL 선택, 쿠키/요청헤더 구성 고려
                ~ 캐시 적중률 개선 : AWS 콘솔 페이지에서 뷰어 요청 비율 확인 가능
9. 스토리지 및 DB
    * EBS(Elastic Block Store)
        - AZ 단위의 저장 공간(블록 스토어) 서비스(EC2 사용 가능)
        - 블록 방식으로 데이터 수정 후 수정된 부분만 업데이트 가능
        - 스냅샷(Snapshot) 기능으로 증분 백업/복구 가능
        - 볼륨은 최대 5000개 까지 생성이 가능
    * EFS(Elastic File System)
        - 리전 단위의 저장 공간(파일 시스템) 서비스
        - 파일 시스템 단위로 데이터 읽기/쓰기가 가능하고 다중 인스턴스에 동시 작업 가능
        - 파일 시스템 단위로 저장되어 저장공간이 자동으로 확장/축소
    * S3(Simple Storage Service)
        - 객체 스토리지의 구성요소는 데이터, 메타데이터, 키
            # 데이터는 실제 데이터
            # 메타데이터는 데이터의 내용,크기 등의 대략적인 정보
            # 키는 고유 ID
        - 객체 방식으로 데이터 수정 후 전체 객체(파일) 업데이트 진행
        - S3 데이터를 버킷에 객체로 저장하는 서비스
            # 최대 객체 파일 5TB
            # 파일 업로드 시 권한 설정으로 엑세스 제어 가능
            # 버전 관리 가능
        - 데이터 검색 빈도, 필요 데이터 가용성에 따라 클래스 선택 가능
            <Standard; 성능> 
            # Standard : 자주 엑세스할 때 + 최소 3개의 AZ 에 저장됨
            # Standard-IA(Infrequent) : 가끔 엑세스할 때 + 데이터 빠른 접근 가능
            # One Zone-IA(RRS 대체) : 가끔 엑세스할 때 + 단일 AZ 에 저장됨
            <Glacier; 효율>
            # Instant Retrival : 가끔 엑세스할 때 + 빠른 복원 가능
            # Flexible : 가끔 엑세스할 때 + 검색 옵션(빠른(1~5분), 보통(3~5시간), 대량(5~12시간))
            # Deep Archive : 가끔 엑세스할 때 + 가장 저렴 + 검색 느림(12시간 내)
    * RDS(Relational Database Service)
        - 관계형 DB 는 데이터 - 데이터 간의 연관된 방식(행, 열로 구분)을 저장하고 쿼리
            # 정해진 테이블에는 동일한 속성(Attribute)값만 들어가있어야 하는 고정적인 방식
            # 정적 스키마를 사용하므로 모든 테이블의 데이터를 유연하게 수정하지 못함
        - AWS RDS
            # AWS 환경에서 관계형 RDS 를 사용할 수 있는 서비스
            # HDD 고가용성 프로비저닝, DB 설정/패치/백업 자동 관리 서비스 제공
            # Lambda 서비스를 사용하여 Serverless 어플리케이션 + DB 쿼리 자동화 가능
            # 1일의 보존 기간을 갖는 자동 백업 기능
        - AWS Aurora
            # 기업형 RDS 엔진(MySQL, PostgreSQL 호환)
                ~ 기존 RDS 엔진보다 3~5배 빠름
                ~ 라이센스 비용이 없음
            # DB 리소스 안정성과 가용성 유지 및 불필요한 IO 작업을 최소화
                ~ 비용 최대 1/10 로 절감
            # 3개의 복사본을 3개의 AZ에 복제하고 S3 에 지속적으로 백업
                ~ 읽기 전용
    * NRDS(Non-Relational Database Service)
        - 비관계형 DB 는 키를 생성하여 그 위에 데이터를 저장하고 쿼리(키-값)
            # 키 위에 저장되는 속성값은 모두 동일한 속성값을 가질 필요가 없어 유연함
        - AWS DynamoDB
            # Serverless DB 서비스
                ~ 모든 규모에서 엄청나게 빠른 응답속도
            # 기존의 RDS 와 다르게 빠른 처리 속도로 다량의 작업량 수행 가능
                ~ DAX(DynamoDB Accelerator) 서비스 사용 시 3배 더 빠르게 수행 가능
                ~ 기본 캐싱 계층
    * Redshift
        - 과거에 있었던 기록들을 분석/처리하는데 필요성이 있음
            # 현재 : 커피 원두 얼만큼 남았는지 확인해 줘
            # 과거 : 지난 1주일 간의 판매 실적 확인해 줘
        - 이러한 필요성은 현재 DB 모델에서는 처리하기 어려울 수 있음
        - 빅 데이터 분석에 필요한 데이터 웨어하우징 서비스
            # 단일 API 호출 작업으로 빅데이터 BI(Business Intelligent) 실현
        - 1일의 보존 기간을 갖는 자동 백업 기능
    * DMS(DB Migration Service)
        - 원본 DB <-> 대상 DB 간 데이터 이동 서비스
            # 동종 DB 이거나 이종 DB 상관없이 지원 가능
            # 이종의 경우 AWS Schema Conversion Tool 을 통해 스키마, 코드 변환
              그 다음, DMS 를 통해 마이그레이션 진행
        - 개발/테스트 목적, 다중 DB 를 단일 DB 로 통합, 연속 복제 활용 가능
    * DocumentDB
        - 컨텐츠 관리, 카탈로그, 사용자 프로필에 적합한 문서형 DB(MongoDB 워크로드)
    * Neptune
        - 추천 엔진, 사기 탐지, 지식 그래프같은 소셜 웹에 효과적인 그래프형 DB
    * QLDB(Quantum Ledger Database)
        - 데이터 불변성을 보장하여 어플리케이션에서 발생한 모든 기록 검토 가능
            # 불변성에 따른 다른 서비스로는 Managed Blockchain 이 있음
                ~ 대량의 분산화 요소가 추가되어 부담될 수 있음
    * ElastiCache
        - DB 내 캐싱 계층을 추가하여 응답 속도를 3배 개선할 수 있는 서비스
            # Memcached 및 Redis 유형의 저장소를 지원
            # DAX 와 비슷함
10. 보안 정책
    * 공동 책임 모델
        - AWS 는 클라우드 자체(물리적 인프라, 네트워크/가상화 인프라) 보안 담당
        - 고객은 클라우드 내부(OS, 어플리케이션, 데이터) 보안 담당
    * 사용자 권한 및 액세스
        - IAM(Identity and Access Management)
            # 무료 글로벌 서비스
            # 최초 계정은 루트 사용자로 로그온
                ~ 모든 사용자는 MFA(Multi-Factor Authentication) 활성화 권장
                ~ 이메일, 암호, 일회용 토큰(OTP 코드)까지 있어야 로그인 가능
                ~ AWS 콘솔 우측 상단 계정 선택 > 보안 자격 증명 > MFA 추가
                ~ 'Google Authenticator' 어플 설치해서 QR 코드 인증
                ~ 기존 등록된 MFA 코드 삭제 후 재등록/변경 진행해야함
            # IAM 을 통해 사용자, 그룹, 역할 생성/부여 가능
                ~ 사용자 기본 권한은 all deny
                ~ IAM 정책(.json) 을 통해 권한 정의 가능
                ~ 정책은 사용자 혹은 그룹에 설정할 수 있음
            # IAM 역할(Role) 은 임시 권한 증명
                ~ 역할 기반 액세스를 사용하여 기업의 자체 자격 증명과 연동 가능
        - 역할(Roles)
            # 관리 콘솔 또는 CLI 에서 API 를 통해 사용자에게 역할 수임
            1) API 호출(AssumeRole) 을 통한 역할 요청
            2) STS(Security Token Service) 에 의한 임시 보안 인증 정보 제공
                ~ Access ID/Secret Access Key + Security Token
            3) 임시 보안 인증 정보를 사용하여 리소스에 접근
            # 역할을 수임받으면(Switch Role) 기존의 권한은 사라지고, 다시 돌아가면(Switch Back) 권한 복권
        - IAM 정책
            # 관리형 정책 : 여러 사용자, 그룹 및 역할에 연결할 수 있는 자격 증명 정책
                ~ AWS 관리형 : AWS 에서 생성/관리
                ~ 고객 관리형 : 고객이 직접 생성/관리
            # 인라인 정책 : 단일 사용자, 그룹 및 역할에 직접 추가하는 정책
                ~ 리소스에 연결되는 것에 대한 권한을 .json 형태의 문서로 정책 구성 가능
            # 정책 요소
                ~ Effect : allow|deny
                ~ Principal : (리소스 정책에서만 필수) 액세스 허용|거부할 계정,사용자,역할 등 표시
                ~ Action : 허용|거부하는 작업 목록 지정
                ~ Resource : 리소스 목록 지정
                ~ Condition : 권한 부여 상황 지정
        - Organizations
            # AWS 계정을 중앙에서 관리하는 서비스
                ~ 계정 전체에서 결제, 액세스, 보안 정책 관리 가능
            # 최초 조직은 루트 컨테이너에 포함
                ~ 필요에 따라 계정을 OU, BU 로 그룹화 가능
            # SCP(Service Control Policy) 를 통해 조직 내 계정 권한 제어 가능
                ~ 사용자 권한 및 역할 제어
        - ControlTower
            # 다중 계정 AWS 환경을 설정, 관리할 수 있는 서비스
            # AWS Well-Architected Guidance Engine(WAGE) 사용 가능
    * 규정 준수
        - Artifact
            # AWS 보안 및 규정 준수 보고서, 온라인 계약 온디맨드 엑세스 서비스
            # Agreements
                ~ 개별 계정 혹은 Organizations 에 대한 계약 검토/수락 및 관리
            # Reports
                ~ 외부 감사 기관이 작성한 규정 준수 보고서 제공
                ~ 리전별, 사업별 보안 표준 및 규정을 준수했음을 검증함
                ~ 감사 시 외부 제출용 보안 검증 문서 제공
        - 고객 규정 준수 센터
            # 보안 감사 체크리스트, AWS 위험 및 규정 준수 개요 등 확인
    * DDoS(Distributed Denial of Service)
        - 이미 AWS 시스템이 대부분의 DDoS 공격을 방어해주고 있음
            # EC2 의 보안 그룹을 통한 정해진 트래픽 통신을 통해 UDP Flood 방어
            # 프론트엔드에 위치한 ELB 를 통해 HTTP 레벨 공격 방어
        - WAF(Web Application Firewall)
            # 어플리케이션으로 들어오는 네트워크 요청을 모니터링하는 웹 방화벽
                ~ CloudFront 및 ALB(Applicatiton Load Balancer) 와 함께 작동
                ~ 웹 ACL 구성을 통해 액세스 관리
        - Shield
            # AWS WAF(Web Application Firewall)을 이용한 DDoS 방어 서비스
            # Standard
                ~ 무료
                ~ 실시간 악성 트래픽 감지 및 자동 완화
            # Advanced
                ~ 유료
                ~ 상세한 공격 진단 및 정교한 DDoS 공격 탐지, 완화
                ~ CloudFront, Route 53, ELB 서비스와 통합 가능
    * KMS(Key Management Service)
        - 데이터의 저장 상태, 전송 중 암호화 작업을 키를 통해 수행하는 서비스
        - 암호화 키를 생성, 관리, 사용
            # IAM 사용자 및 역할을 통해 키 관리 설정 가능
    * Inspector
        - 자동 보안 평가 서비스
            # EC2 인스턴스 오픈 액세스, 소프트웨어 버전 취약점 등을 검사
            # 보안 탐지 결과 목록(보고서) 제공
                ~ 심각도 수준에 따라 우선 순위 부여, 설명 및 Workaround 제공
    * GuardDuty
        - AWS 인프라 및 리소스에 대한 지능형 위협 탐지 기능 제공 서비스
            # 네트워크, 계정 활동을 지속적으로 분석
            # Management Console 에서 탐지된 위협의 결과(Workaround 포함) 확인 가능
                ~ Troubleshooting 을 위한 Lambda 함수 구성 가능
11. 모니터링
    * CloudWatch(NMS)
        - 다양한 지표를 모니터링하고 관리, 알람 작업을 구성할 수 있는 웹 서비스
            # 사전 정의된 임계값에 따라 자동으로 작업을 수행하는 알람 생성 가능
            # 알람은 SNS 와 통합 가능
        - 알람(경보)
            # 지표의 상태 변화에 따라 자동 작업 구성 가능
            # 지표, 임계값 및 기간 선택 필요
                ~ OK : 임계값 내
                ~ ALARM : 임계값 벗어남
                ~ INSUFFICIENT_DATA : 알람이 방금 시작되었거나, 지표 상태가 정상적이지 않음
        - 대시보드
            # 단일 위치에서 클라우드와 온프레미스 리소스에 대한 모든 지표가 자동 업데이트
                ~ 모든 리소스에 대한 가시성 확보
                ~ MTTR(Min-Time to Resolution; 문제해결 시간) 단축
                ~ TCO(Total Cost Ownership; 총 소유 비용) 감소
        - 각 지표들은 '타임스탬프 + 네임스페이스(컨테이너)' 로 구성됨
            # AWS/Services 형태의 이름 지정 규칙(ex_ AWS/EC2)
        - 각 지표들은 차원(Dimension)이라고 하는 '이름/값 자격증명 키 페어' 형태로 지표 전송
        - CloudWatch Logs
            # EC2, Lambda 등 리소스에서 로그를 저장, 모니터링, 액세스 가능
                ~ 로그를 게시할 수 있도록 IAM 권한을 부여 --> 로그 전송
                ~ EC2 인스턴스에 CloudWatch Log 에이전트 설치 --> 로그 전송
                ~ Log Event : 어플리케이션 또는 리소스 활동 기록 레코드
                ~ Log Stream : 모니터링 중인 동일 리소스의 로그 이벤트 모음
                ~ Log Group : 동일한 보존 및 권한 설정을 공유하는 로그 스트림 모음
        - CloudWatch EventBridge
            # CloudWatch 에서 캡처된 이벤트 관리 서비스
                ~ 이벤트 수집/전달, 보안 및 권한 부여, 오류 처리
                ~ 완전관리형 서버리스 서비스
                ~ 이벤트에 대해서면 비용 지불
    * CloudTrail(Log)
        - AWS 대한 모든 요청을 기록하는 API 감사 도구 서비스
            # 15분 이내에 모든 이벤트를 기록
            # 로그를 지정된 S3 버킷에 저장
        - 로그 분석
            # userIdentify : 요청을 수행한 사용자
            # requestParameters : 요청 내용
            # eventTime : 요청 수행 시간
                ~ eventName : API 요청 내용
                ~ eventRegion : API 요청 수행 위치
            # responseElements : API 요청 응답 내용
        - Insights
            # AWS 계정 내 비정상적인 API 활동을 자동으로 감지하는 옵션
    * Trusted Advisor
        - 5대 핵심 원칙을 기반으로 AWS 권장 사항을 실시간으로 제시하는 무료 웹 서비스
            # 비용 최적화, 성능, 보안, 내결함성, 서비스 한도
        - 별도의 액션을 추가하여 EC2 인스턴스를 특정 조건에 부합할 경우 종료시킬 수 있음
12. 마이그레이션
    * CAF(Cloud Adoption Framework)
        [사업 중점]
        - 비지니스 : 사업 및 회계
        - 인력 : 인력 관리
        - 거너번스 : 기술 및 프로세스
        [기술 중점]
        - 플랫폼 : IT 기술
        - 보안 : IT 정보보안
        - 운영 : IT 운영/지원
    * 6R Stratage
        - 이관(Rehosting) ; Rift and Shift
            # 기존 시스템을 그대로 클라우드 환경으로 이동
        - 설정(Replatforming)
            # 이관시킨 시스템을 더 나은 환경으로 설정
        - 폐기(Retire)
            # 마이그레이션 중 기존 시스템의 불필요한 부분들을 제거
        - 유지(Retain)
            # 마이그레이션 중 기존 시스템에서 아직 필요한 부분들을 현재 상태로 유지
        - 구매(Repurchasing)
            # 마이그레이션 중 클라우드 환경에서 더 적합한 리소스 구매(계약)
                ~ 선행 비용 상승
        - 생산(Refactoring)
            # 마이그레이션 후 새로운 환경에서의 생산 시도
                ~ 초기 비용 가장 높음
    * Storage Gateway
        - 온프레미스 서버 <-> AWS Storage 연결 지원 서비스
            # SMB, NFS, iSCSI 등 여러 파일 전송 프로토콜 지원
        - Gateway-VTL(Virtual Tape Library)
            # VTL 를 사용하여 저렴하고 안정적으로 데이터 백업을 AWS Glacier 에 저장할 수 있음
        - Gateway-Cached
            # 기존 스토리지 데이터를 저렴한 비용에 낮은 지연 시간으로 접근할 수 있다.
    * DataSync
        - 온프레미스 Storage <-> AWS S3, EFS, FSx for Windows 간 연결 지원 서비스
            # 온프레미스 환경에 DataSync 에이전트가 가상 인스턴스를 통해 배포됨
    * Transfer Family
        - SFTP 를 사용하여 S3 에 파일 업로드/다운로드 기능의 서비스
    * Snow 원격 장비
        - AWS Management Console 에서 주문 가능
        - Snowcone
            # CPU 2개, 4G 메모리, 8TB 가용 스토리지
            # 간단한 엣지컴퓨팅(EC2, IoT Greengrass) + 데이터 전송
                ~ 데이터 복사 > AWS 전송 > AWS S3 에 데이터 백업
        - Snowball Edge
            # Edge Compute Optimized
                ~ 52개 vCPU, 208G 메모리, 42TB HDD(S3, EBS 호환) + 7.68TB NVMe SSD(EBS 호환)
                ~ 고성능 컴퓨팅 특화
            # Edge Storage OPtimized
                ~ 40개 vCPU, 80G 메모리, 80T HDD(S3, EBS 호환) + 1TB SATA SSD(EBS 호환)
                ~ 고용량 마이그레이션 특화
        - Snowmobile
            # 트레일러 트럭 컨테이너로 이동하는 엑사바이트 규모의 데이터 전송 서비스
                ~ 최대 80-100페타바이트 데이터 전송 가능
    * 혁신 기술
        - Serverless Application
            # AWS Lambda
        - AI(Aritificial Intelligent)
            # Lex : 음성 및 텍스트 챗봇 빌드
            # Transcribe : 음성 -> 텍스트 변환
            # Textract : 문서에서 텍스트/데이터 추출
            # Comprehend : 텍스트에서 패턴 검색
            # Fraud Detector : 온라인 사기 행위 식별
        - ML(Machine Learning)
            # SageMaker : 머신러닝 모델 빌드, 훈련, 배포 특화 서비스
            # A2I(Augmented AI) : 머신 러닝 사례에 대한 검토 워크플로 제공
        - VMware on AWS
        - DeepRacer
        - Ground Station
13. 프레임워크
    * Well-Architeched Tool
        - 운영우수성
            # 코드로 작업 수행, 문서 주석 추가, 소규모 변경을 자주 수행
        - 보안성
            # 계층별 보안 적용, 데이터 전송/저장 암호화, 모범 보안 사례 자동 적용
        - 안정성
            # 장애 자동 복구, 시스템 가용성 향상을 위한 확장
        - 성능효율성
            # 서버리스 아키텍처 유무, 배포가능 시스템 유무
        - 비용최적화
            # 소비 모델 종류, 비용 분석, 비용 절감 유무