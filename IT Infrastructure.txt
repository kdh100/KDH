1. 시스템 기초 지식
    * 온프레미스(On-Premisses)
        - 자사에서 데이터센터를 보유하고 시스템 구축, 운용까지 모두 수행
    * 퍼블릭 클라우드
        - 인터넷을 경유하여 불특정 다수에게 제공되는 클라우드 서비스
            # IaaS
            # PaaS
            # SaaS
    * 프라이빗 클라우드
        - 특정 기업 그룹에게만 제공되는 클라우드 서비스
2. 하드웨어와 네트워크 기초 지식
    * 하드웨어
        - CPU, MEMORY, DISK, NIC...
    * 네트워크
        - MAC, IP, PORT...
3. OS 기초 지식
    * 커널(Kernel)
        - OS 코어 프로그램으로 H/W 를 컨트롤하는 핵심 프로그램
        - Debian, CentOS, SUSE...
4. 미들웨어(Middleware) 기초 지식
    * 웹서버/웹어플리케이션서버(Web, WAS)
        - Apache HTTP Server, Nginx...
    * 데이터베이스서버(관계형 데이터베이스)
        - Oracle, MS-SQL, MySQL, PostgreQSL...
        - AWS RDS, AWS Aurora...
    * NoSQL(비관계형 데이터베이스; Key-Value)
        - MongoDB, Redis, Apache Cassandra...
        - AWS DynamoDB...
5. 인프라 구성 관리 기초 지식
    * OS 시작 자동화
        - Redhat 의 Kickstart
        - 로컬 PC에 가상 환경 구축을 위한 Vagrant
    * OS/Middleware 설정 자동화
        - Ansible, Chef, Puppet...
6. Ansible(Infrastructure as a code)
    * 설치
        - useradd -G wheel ansible
        - echo ansible | passswd --stdin ansible
        - hostnamectl set-hostname CONTEXT
        - nm-cli-connection(IP 설정)
        - sudo -l(사용자 루트 권한 설정)
        - sudo vi /etc/sudoers > %wheel NOPASSWD: ALL
        - sudo vi /etc/hosts(노드 정보 리스트)
        - ssh NODE > cd ~/.ssh > ssh-keygen > ssh-copy-id -i id_rsa.pub NODE
        - sudo yum install -y epel-release yum-utils
        - sudo yum install -y ansible
    * 인벤토리(Inventory; 호스트 리스트)
        - Static : 텍스트 파일로 정의
            # Default Static Inventory : /etc/ansible/hosts > ansible all --list-hosts
                ~ recommanded : ~/ansible/inventory > ansible all -i inventory --list-hosts
                ~ '-i' 옵션이 기본 호스트 파일보다 우선순위 높음
        - Dynamic : 다른 정보 제공 프로그램 등으로 정의
        - CMD
            # ansible {all,ungrouped,GROUP} [-i INVENTORY] --list-hosts
    * 설정파일(ansible.cfg)
        - cat /etc/ansible/ansible.cfg
            # ansible-config init --disabled > ansible.cfg
    * Ad-Hoc CMD
        - ansible HOST -m MODULE -a 'ELEMENTS' -u USER -b(become=true; sudo 효과)
            # ansible web1.example.com -m user -a 'name=user01 uid=4000 state=present'
        - ansible-doc MODULE : 모듈 사용법 메뉴얼 문서
            # ansible-doc $1 | sed -n '/EXAMPLES/,$p' | more
        - Module
            # File
                ~ copy
                ~ file
                ~ lineinfile
                ~ synchronize
            # Package
                ~ yum
                ~ apt
                ~ dnf
                ~ pip
                ~ gem
                ~ package
            # System
                ~ firewalld
                ~ service
                ~ user
                ~ reboot
            # Net Tools
                ~ get_url
                ~ uri
                ~ nmcli
7. 플레이북(Playbook)
    * 'ansible.cfg', 'inventory', 'pb.yml' 총 3개의 파일이 구성되어야 구현 가능
    * Ad-Hoc 은 일회성 실행 명령어로 대상 호스트 혹은 그룹에 적용시킨다,
    * Playbook 은 호스트에게 지정 작업(Task) 목록들을 수행한다.(1회 이상의 지정 작업 포함 가능)
        - 양식
            ---
            - name: Disable and uninstall apache HTTPD
              hosts: webservers
              gather_facts: no
              tasks:
                # firewall-cmd --permanent --remove-service={http,https}
                # firewall-cmd --reload
                - name: Configure firewall
                  firewalld:
                    service: "{{ item }}"
                    zone: public
                    permanent: yes
                    immediate: yes
                    state: disabled
                  loop:
                    - http
                    - https
                # rm files/index.html ansible1:/var/www/html/index.html
                - name: Corrent index.html is absent
                  file:
                    path: /var/www/html/index.html
                    state: absent
                  ignore_errors: yes
                # yum remove htppd
                - name: httpd package is absent
                  yum: 
                    name: 
                      - httpd
                      - mod_ssl
                    state: absent
                  ignore_errors: yes
            ...
        - 각 작업은 ansible.cfg 에 명시된 'become = true' 에 따라 sudo 명령어 수행
            # become: true 지정하고 원격 사용자 지정하여 특정 사용자로 작업 수행 가능
                ~ become: true\n remote_user: devops
        - '키: 값' 형식(.yml)
            # 첫 라인 시작은 '---', 마지막 라인 끝은 '...'
                ~ '...' 은 생략 가능
                ~ 들여쓰기(indent) 주의
            # 여러줄의 문자열은 파이프(|), 비교자(>) 사용하여 표시 가능
            # 사전(Dictionaly)
                ~ name: KDH(Key: Value) : Vertical
                  or
                  {name: KDH} : Horizontal
            # 목록(List)
                ~ name: \n  - KDH : Vertical
                  or
                  name: [KDH] : Horizontal
        - CMD
            # ansible-playbook --syntax-check : 플레이북 문법 점검
            # ansible-playbook *.yml : 플레이북 실행
                ~ -v(1~4개(vvvv), 많을수록 더 자세하게) : 자세한 설명
8. 변수(Variable), 시크릿(Secret), 팩트(Facts)
    [변수]
    * 변수 범위(좁은 범위가 넓은 범위보다 우선 순위)
        - 글로벌 범위 : 명령어줄 또는 ansible 구성에서 설정한 변수
        - 플레이 범위 : 플레이북 및 관련 구조에서 설정한 변수
        - 호스트 범위 : 인벤트뢰, 팩트 수집 또는 등록된 작업별 호스트, 호스트그룹에 설정한 변수
    * 변수 선언
        - 직접 선언
            # 플레이북 내 변수값을 직접 지정해서 선언
        - 차용 선언
            # 변수값을 지정한 파일을 플레이북 내에 해당 파일 경로를 지정하여 차용 선언
    * 변수 사용
        - 글로벌 범위 변수 사용 : 
        - 플레이 범위 변수 사용 : "{{ 변수 }}"
        - 호스트 범위 변수 사용 : ~/ansible/{group_vars|host_vars}/{그룹명|호스트명}
            # 그룹별 변수 혹은 호스트별 변수 지정을 위해 디렉토리 생성하여 하위에 관리
        - 배열 변수 : 
            # users: \n  user01: \n  name: gildong\n...(중략)user02:  \n  ...(중략)
                ~ Key 안에 Value(Key) 안에 Value(Key) 와 Value
                ~ 올바른 표기법 : users['user01']['name'] = 'gildong' 출력(Python 양식)
    [시크릿]
    * Ansible Vault
        - 구조화된 데이터 파일을 암호화/복호화
            # 명령줄 도구로 파일 생성 > 편집 > 암호화 > 복호화 > 확인
        - CMD
            # 생성 : ansible-vault create file.yml > 암호 입력/확인
                ~ ansible-vault create --vault-password-file=pw.txt file.yml
                ~ pw.txt 는 암호가 들어있는 파일, chmod 로 퍼미션 제한해둘 것
            # 확인 : ansible-vault view file.yml > 암호 인증
            # 편집 : ansible-vault edit file.yml > 암호 인증
            # 암호화 : ansible-vault encrypt file1.yml file2.yml > 암호 입력/확인
                ~ 기존 파일을 암호화, 여러개를 동시에 암호화 가능
            # 복호화 : ansible-vault decrpyt file.yml --output=dec_file.yml > 암호 입력/확인
                ~ 암호 파일을 복호화, 다른 이름으로 저장 가능
            # 암호화 암호변경 : ansible-vault rekey file.yml > 암호 확인 > 암호 입력/확인
        - 플레이북에서 사용
            # ansible-playbook --vault-id @prompt file.yml
                ~ 암호 입력 프롬프트 출력되면 암호 인증을 해야 정상적으로 플레이 가능
    [팩트]
    * Ansible Facts
        - 관리호스트에서 자동으로 검색한 변수
            # 플레이 조건문, 반복문, 기타 명령문의 일반 변수 등 정보 포함
                ~ hostname, kernel, NIC, ipaddr, CPU, OS, available MEM/Disk...
        - 일반적으로 setup 모듈이 자동 실행되어 정보 수집함
            # Ansible 2.3 이상 버전에서는 gathering facts 작업으로 자동 정보 수집
        - 관리호스트에서 수집된 팩트 확인
            # debug 모듈을 사용하는 플레이북 실행 > ansible_facts 변수 출력값 확인
                ~ ...tasks: ...debug:\n  var: ansible_facts
            # ansible localhost -m setup -a 'filter=ansible_hostname'
                ~ setup 으로 확인된 팩트 별 키 값을 필터 적용시키면 특정 팩트값 추출 가능
            # ansible localhost -m debug -a 'var=hostvars["localhost"]'
                ~ 일부 변수 중 ansible 에 의해 자동으로 구성되어지는 매직 변수
        - 플레이북 작업 속도를 빠르게 하려면 각 플레이마다 'gather_facts: no' 설정
9. 반복문과 조건문
    * 반복문
        - 'loop' 모듈
            # "{{ item }}" -> loop: 안에 리스트(- 기호로 작성) 아이템에 대해 반복 작업
            # loop 안에 리스트 대신 변수로 지정해서 처리하는게 더 좋음
                ~ vars: 안에 변수명: 안에 리스트 아이템 지정
                ~ loop: 안에 리스트 대신 ""{{ 변수명 }}" 지정
            # 변수 안에는 사전형 혹은 해시형 처럼 키:값 형태로도 지정해서 반복 작업 가능
                ~ loop: 안에 리스트 아이템을 사전형(name: hong, groups: wheel) 지정
                ~ 작업에서 name: "{{ item.name }}", group: "{{ item.group }}" 구성 가능
        - 'register' 모듈
            # 반복 작업의 출력을 캡쳐
                ~ register: results
    * 조건문
        - 'when' 모듈
            # 특정 조건을 충족하는 작업 또는 플레이 실행, 조건 불충 시 작업 패스
            # 조건
                ~ boolean 형 int 데이터 비교(ex_ ==, !=, >=, <= 등)
                ~ boolean 형 변수의 참|거짓 : [not] 변수
                ~ is defined|is not defined : 변수 존재 여부
                ~ 'or', 'and' 를 통해 복수 조건 구성 가능
    * 반복문 + 조건문
        - 'loop' 모듈과 'when' 모듈은 같은 레벨에서 실행되어야 함
            # 'register: result' 으로 저장한 결과를 'when: result.rc == 0' 로 비교 조건문
                ~ rc : 실행 결과($?)
10. 제어문
    * ansible 은 멱등성(반복 연산에도 결과가 달라지지 않는 성질) 보장
        - 서비스의 설정 파일(.cfg, .conf) 수정 시 서비스 재시작이 되어야 적용됨
            # started 대신 restarted
    * 'notify ~ handlers' 모듈
        - 'notify' 모듈이 호출되면(triggered), 'handlers' 작업 수행(only 'changed', not 'ok')
            # 'handlers' 에서 지정한 작업 순서대로 실행
                ~ 중복 작업에 대해서 오직 작업 하나만 처리됨
            # 'handlers' 작업은 모든 플레이 작업 완료 후 마지막 실행
11. 작업 오류 처리
    * ansible 은 작업 변환 코드를 평가하여 작업의 성공 여부를 판단, 실패 시 플레이 중단
    * 'ignore-errors' 모듈
        - 플레이 정의 레벨, 작업이 실패해도 무시하고 다음 작업 진행
    * 'force-handlers' 모듈
        - 플레이 정의 레벨, 작업이 실패해도 강제로 작업 호출
    * 'failed_when' 모듈
        - 작업 정의 레벨, 작업 실패 조건을 정의
            # 'register' 로 작업 결과 저장, 'failed_when' 으로 저장된 결과 참조
                ~ 해당 모듈로 실패했을 경우 플레이 결과의 failed_count 는 올라가지 않음
    * 'changed_when' 모듈
        - 작업 정의 레벨, 상태 changed 변경 조건을 정의
            # 'register' 로 작업 결과 저장, 'changed_when' 으로 결과 참조 후 notify 호출
    * 'block ~ rescue ~ always' 모듈
        - 플레이 정의 레벨, 플레이 작업을 논리적으로 그룹화
        - block 실패 > rescue 작업, always 항상 작업(block + [rescue] + always)
