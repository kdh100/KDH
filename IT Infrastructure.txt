1. 시스템 기초 지식
    * 온프레미스(On-Premisses)
        - 자사에서 데이터센터를 보유하고 시스템 구축, 운용까지 모두 수행
    * 퍼블릭 클라우드
        - 인터넷을 경유하여 불특정 다수에게 제공되는 클라우드 서비스
            # IaaS
            # PaaS
            # SaaS
    * 프라이빗 클라우드
        - 특정 기업 그룹에게만 제공되는 클라우드 서비스
2. 하드웨어와 네트워크 기초 지식
    * 하드웨어
        - CPU, MEMORY, DISK, NIC...
    * 네트워크
        - MAC, IP, PORT...
3. OS 기초 지식
    * 커널(Kernel)
        - OS 코어 프로그램으로 H/W 를 컨트롤하는 핵심 프로그램
        - Debian, CentOS, SUSE...
4. 미들웨어(Middleware) 기초 지식
    * 웹서버/웹어플리케이션서버(Web, WAS)
        - Apache HTTP Server, Nginx...
    * 데이터베이스서버(관계형 데이터베이스)
        - Oracle, MS-SQL, MySQL, PostgreQSL...
        - AWS RDS, AWS Aurora...
    * NoSQL(비관계형 데이터베이스; Key-Value)
        - MongoDB, Redis, Apache Cassandra...
        - AWS DynamoDB...
5. 인프라 구성 관리 기초 지식
    * OS 시작 자동화
        - Redhat 의 Kickstart
        - 로컬 PC에 가상 환경 구축을 위한 Vagrant
    * OS/Middleware 설정 자동화
        - Ansible, Chef, Puppet...
6. Ansible(Infrastructure as a code)
    * 설치
        - useradd -G wheel ansible
        - echo ansible | passswd --stdin ansible
        - hostnamectl set-hostname CONTEXT
        - nm-cli-connection(IP 설정)
        - sudo -l(사용자 루트 권한 설정)
        - sudo vi /etc/sudoers > %wheel NOPASSWD: ALL
        - sudo vi /etc/hosts(노드 정보 리스트)
        - ssh NODE > cd ~/.ssh > ssh-keygen > ssh-copy-id -i id_rsa.pub NODE
    * Inventory
        - Static : 텍스트 파일로 정의
            # Default Static Inventory : /etc/ansible/hosts > ansible all --list-hosts
                ~ recommanded : ~/ansible/inventory > ansible all -i inventory --list-hosts
                ~ '-i' 옵션이 기본 호스트 파일보다 우선순위 높음
        - Dynamic : 다른 정보 제공 프로그램 등으로 정의
        - CMD
            # ansible {all,ungrouped,GROUP} [-i INVENTORY] --list-hosts
    * ansible.cfg
        - cat /etc/ansible/ansible.cfg
            # ansible-config init --disabled > ansible.cfg
    * Ad-Hoc CMD
        - ansible HOST -m MODULE -a "ELEMENTS"
            # ansible-doc MODULE : 모듈 사용법 메뉴얼 문서
                ~ ansible web1.example.com -m user -a 'name=user01 uid=4000 state=present'
        - Module
            # 플레이북에서 모듈 사용시 에러 무시하고 다음 작업으로 넘어가고 싶을 때
                ~ 'ignore_error: yes' 를 모듈 라인과 같은 블록에 사용
            # File
                ~ copy
                ~ file
                ~ lineinfile
                ~ synchronize
            # Package
                ~ yum
                ~ apt
                ~ dnf
                ~ pip
                ~ gem
                ~ package
            # System
                ~ firewalld
                ~ service
                ~ user
                ~ reboot
            # Net Tools
                ~ get_url
                ~ uri
                ~ nmcli
7. Playbook
    * Ad-Hoc 은 일회성 실행 명령어로 대상 호스트 혹은 그룹에 적용시킨다,
    * Playbook 설정한 호스트에게 지정한 작업(Task) 목록들을 적용시킨다.(1회 이상의 지정 작업 포함 가능)
        - '키: 값' 형식(.yml)
            # 첫 라인 시작은 '---', 마지막 라인 끝은 '...'
                ~ '...' 은 생략 가능
            # 동일한 들여쓰기(indent) 로 작업, 모듈 구분됨
        - 양식
            ---
            - name: Disable and uninstall apache HTTPD
              hosts: webservers
              tasks:
                # firewall-cmd --permanent --remove-service={http,https}
                # firewall-cmd --reload
                - name: Configure firewall
                  firewalld:
                    service: "{{ item }}"
                    zone: public
                    permanent: yes
                    immediate: yes
                    state: disabled
                  loop:
                    - http
                    - https
                # rm files/index.html ansible1:/var/www/html/index.html
                - name: Corrent index.html is absent
                  file:
                    path: /var/www/html/index.html
                    state: absent
                  ignore_errors: yes
                # yum remove htppd
                - name: httpd package is absent
                  yum: 
                    name: 
                      - httpd
                      - mod_ssl
                    state: absent
                  ignore_errors: yes
            ...
        - 각 작업은 기본값으로 become 모듈 없으면 sudo 로 진행
            # become: true 지정하고 원격 사용자 지정하여 특정 사용자로 작업 수행 가능
                ~ become: true\n remote_user: devops
