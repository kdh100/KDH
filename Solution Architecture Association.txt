* AWS Billing and Cost Management
    - Dashboard
        # 비용 요금 관리 대시보드에서 특정 기간 동안의 AWS 리소스에 대한 비용 비교를 그래프 형태로 확인 가능

* AWS Organizations
    - alternate contact
        # AWS 조직 대시보드 혹은 CLI 에서 조직 내 모든 사용자들에 대한 대체 연락처를 설정해줄 수 있다.

* AWS Control Tower
    - 모든 조직, 계정에 대한 대규모 보안 거버넌시 적용이 가능한 서비스

* AWS Athena
    - S3 등 저장소에 저장된 파일을 분석하고 보고서 작성에 필요한 데이터를 추출, 작성 가능한 서비스

* AWS Glue
    - 데이터를 수집(Extract)/변환(transform)/출력 및 저장(load)하기 위한 서비스, 크롤러를 통해 데이터 수집
        # 예약된 작업의 Job 실행 가능
        # Bookmark 기능을 사용하여, Job 이 이전에 처리했던 데이터를 중복 처리하지 않게 방지
            ~ 이전 처리했던 데이터를 기점으로 추가된 신규 데이터에 대해서만 처리(증분식 처리)

* AWS Kinesis
    - Data Analytics : 메시지(데이터) 수집/처리/분석 가능
    - Data Stream : 메시지(데이터) 수집 특화
    - Data Firehose : 메시지(데이터) -> S3 전송/저장
        # CloudWatch 의 로그 그룹에 저장된 로그들을 AWS OpenSearch(Elasticsearch; 로그 분석 서비스) 로
          이동시키는 것도 가능하다. cloudwatch 를 kinesis data firehose delivery 소스로,
          opensearch 를 delivery 목적지로 설정하면 된다.

* AWS SQS
    - duplicated message proceed
        # FIFO 를 통한 선입선출 설정을 하면 방지하거나,
          ChangeMessageVisibility 를 통해서 제한 시간을 늘려 다른 람다 함수에게 중복 처리되는 것을 방지 가능.
    - multiple message proceed
        # ReceiveMessageWaitTime 을 통해서 메시지를 수신받는 시간을 늘려 짧은 시간에 여러번 처리되는 걸
          방지할 수 있다. 기본값은 0초, 최대 20초까지 설정 가능.
            ~ SQS 는 메시지를 요청한만큼(ReceiveMessage API call) 요금이 처리되서 설정하는게 좋다.
    - dead-letter queue
        # DLQ 라는 배달하지 못한 메시지만을 위한 별도의 큐를 만들어 보관/처리할 수 있다.

* AWS Lambda
    - serverless workload
        # 리소스 기반 정책을 lambda:InvokeFunction 함수에 추가하고, EventBridge 에서 정의한 특정 이벤트를
          기본으로 서비스를 동작하게 매칭시킨다.
    - single lambda -> split into two lambda
        # 단일 람다 함수로 처리하기에 부하량이 많을 경우, 두개의 람다 함수로 나누어 기능을 분배시켜
          확장성과 기능향상을 높힐 수 있음

* AWS API Gateway
    - API(Application Program Interface) 단일 진입점을 제공하는 서비스
        # HTTP 기반의 웹소켓 API 혹은 RESTful(Representational State Transfer; 상태/조건 기반 전송) API
          을 생성/유지하고 AWS <-> 외부 API 호출에 대한 처리 및 모니터링 지원

* AWS CloudWatch
    - composite alarm
        # 복합 경고를 통해서 A 조건과 B 조건이 모두 부합하는 경우에만 알람이 발생하도록 설정할 수 있다.
* AWS MQ
    - 다양한 메시지를 수신하고 전달해주는 메시지 브로커와 AWS 리소스의 호환성을 위한 서비스
        # EC2 인스턴스 위에서 가동, 고가용성을 위한 active/standby 구성 가능

* AWS CloudFront
    -  S3 의 오리진 데이터를 읽어 들여(cache) 배포해 성능 개선 및 대기 시간 감소 효과
        # OAI(origin access identity)를 생성하여 cloudfront 배포에 할당시키고,
          s3 버킷 정책에서 정확한 OAI 값에 대한 접근 및 읽기 권한을 부여해주면 된다.
    -  API Gateway 를 통해서 Cloudfront 의 요청을 S3 에 직접 받지 않고 대신 받게 하고,
       lambda 함수 호출을 통해 백엔드 API 호출을 진행
    - 추가 보안 설정
        # signed url 은 민감한 데이터 등에 접근하기 위한 별도의 url 을 프라이빗 키로 서명하여 요청한
          사용자에게 제공하고, 접근중인 민감한 데이터에 대한 서명된 url 에 대해 cloudfront 가 퍼블릭 키
          를 사용하여 유효성 검사를 진행하여 접근 관리.
        # field-level encryption 은 HTTPS 형식의 데이터 전송에 추가적인 보안 설정으로,
          cloudfront 가 퍼블릭 키로 각 전송 구간(사용자 - cloudfront - 오리진)에서 필드 레벨 암호화를
          걸면, 사용자 혹은 종단 어플리케이션은 프라이빗 키를 통해서만 해독하고 확인할 수 있게 된다.

* AWS Macie
    - S3 에 저장된 민감한 데이터에 대해서 머신러닝을 통해 색출하고 보호할 수 있는 서비스

* AWS Rekognition
    - 머신러닝을 통해 이미지 또는 동영상같은 미디어 데이터로부터 원하는 정보/데이터를 식별/분석해주는 서비스
        # Augmented AI(A2I) 를 통해서 human review workflow 를 활성화 시켜 자동 분석된 데이터에 대해
          사람이 직접 분석된 데이터를 검증할 수 있도록 만들 수 있음

* AWS Textract
    - 텍스트 파일에서 특정 문자열 등의 데이터를 추출하기 위한 서비스

* AWS Comprehend Medical
    - 텍스트 파일에서 의학 관련 문자열 등의 의학 데이터를 추출/분석하기 위한 서비스

* AWS AppFlow
    - Appflow 는 SaaS 어플리케이션들과 AWS 서비스들을 연동시킬 수 있는 서비스

* AWS Directory Service
    - managed microsoft AD
        # 윈도우 AD 기능을 AWS 위에서 구현해야할 때 사용하는 서비스
        # 기존의 AD 기능을 AWS 에 가져와야할 때는 AD Connector
          AD 호환성이 필요하기만 할 때는 Simple AD 를 사용

* AWS Fargate
    - ECS, EKS 에서 필요로하는 컨테이너를 올리기 위한 서버리스 컴퓨팅 리소스 제공 서비스

* AWS Route 53
    - Route Policy
        # simple, weighted, geolocation, latency, failover, multivalue 의 정책들이 있다.
          simple 은 기본, weighted 는 라우팅 비율을 가중치로 컨트롤,
          geolocation 은 쿼리 발생 위치 기반 라우팅,
          latency 는 지연 시간 기반, failover 는 말 그대로 active/standby 형태의 HA 기능,
          multivalue 는 로드밸런싱처럼 요청에 따른 각각 다른 리소스 응답의 라우팅 제공.
        # 글로벌하게 서비스 하는 어플리케이션에 대한 저지연 구성에서는 latency 가 최적.

* AWS Global Acceleration
    - 여러 AWS 리전의 엔드포인트를 지원하는 트래픽 가속 전달 서비스
        # GA 로 접근 가능한 2 개의 Static IP 를 제공하여, 각 리전의 엣지 로케이션의 엔드포인트로 활용.

* AWS VPC
    - PrivateLink
        # VPC 와 AWS 서비스, VPC 와 다른 AWS 계정의 서비스, 혹은 서드파티 VPC 와의 통신 연결 서비스.
          IGW, NAT 등이 전혀 필요하지 않으며, 접속하려는 대상의 VPC 엔드포인트만 있으면 된다.

* AWS Auto Scaling
    - target tracking scale policy
        # 동적(dynamic) 조정 정책 중 하나로 CloudWatch 지표와 특정 비율의 목표치를 설정해야한다.
          예를 들어, AS 그룹의 CPU 사용률을 50% 에 가깝게 유지시키도록 목표로 설정 가능하다.

* AWS EC2
    - capacity reservation
        # 온디멘드 용량 예약을 통해서 특정 리전, 특정 AZ 에 사용할 EC2 인스턴스에 대한 예약 가능

* AWS S3
    - Transfer Acceleration
        # 모든 글로벌 사이트의 데이터를 단일 S3 버킷에 빠르게 집계
    - Multi-part Upload
        # 100 MB 이상의 데이터를 빠르게 업로드
    - aws:PrincipalOrgID
        # 버킷 정책에 추가 + 조직 ID 에 대한 참조로 조직 한정 접근 제한 가능
    - Gateway VPC endpoint
        # EC2 인스턴스에 퍼블릭 인터넷 연결 없이 접근 가능, 비용 절감 효과
    - File Gateway
        # 온프레미스 환경의 데이터를 S3 에 연동하여 사용 가능
    - End-user install utility for access S3
        # 온프레미스 환경의 스토리지 공간을 늘리기 위해
    - Intelligent-Tiering
        # 객체 혹은 프리픽스 단위로 사용 빈도에 따라 클래스를 자동으로 변환시켜줌, 생명주기에서 설정 가능
    - Object-Lock
        # object lock 을 통해서 객체를 특정 기간동안 변경/삭제 불가하게 설정 가능
          governance(조건적 변경가능), compliance(절대 변경 불가) 모드 중 선택
        # legal hold 를 통해서도 객체 변경/삭제 제한 가능(object-lock 의 기한과 독립적, 기한 제한 없음)
          s3:PutObjectLegalHold IAM 역할이 필요
    - Cross-region replication
        # 다른 리전의 S3 버킷에 현재 버킷 혹은 버킷 내 프리픽스의 데이터를 복제할 수 있다.
          Versioning 기능을 활성화해야 사용 가능.

* AWS EFS
    - 동시 처리 : 사용자가 동시에 다른 데이터 접근/처리 가능

* AWS RDS
    - unencrypted DB instance -> encryption
        # DB 인스턴스 스냅샷의 복사본을 암호화하고 암호화된 복사본으로 DB 인스턴스를 교체 복구 시키면 됨.

* AWS Aurora
    - 고가용성 및 읽기 워크로드 충족 : MySQL 호환, 다중 AZ 에 읽기 전용 복제본 배포
        # 고가용성 및 읽기 워크로드 충족 : MySQL 호환, 다중 AZ 에 읽기 전용 복제본 배포
        # cloning 을 통해 운영중인 DB 클러스터에 대한 볼륨을 복제하여 복제본을 만들 수 있다.

* AWS RDS Proxy
    - Proxy instance
        # DB 인스턴스 앞에 별도의 프록시 인스턴스를 둬서 DB 에 대한 접속 관리를 해주는 것.
          DB 인스턴스의 장애로 인한 다운타임 혹은 서비스 저하를 최소한으로 줄여주며,
          급등하는 트래픽에 대해서도 접속(poll) 관리 덕에 timeout 등의 서비스 품질 저하를 방지해줌.

* AWS DynamoDB
    - capacity mode
        # 트래픽 예측이 가능한 경우 -> provisioning mode
          트래픽 예측이 불가능한 경우 -> on-demand mode, auto-scaling 기능 있음
    - point-to-time recovery
        # 특정 시간대로 DB 테이블을 복원시킬 수 있는(되돌릴 수 있는) 기능
    - DAX(DynamoDB Accelerator)
        # 캐시 메모리를 통한 성능 향상 기능

* AWS FSx
    - for Windows File Server
        # 윈도우 파일 공유 서버와 호환할 수 있는 서비스
    - for Lustre integrated with S3
        # 고성능 컴퓨팅(HPC)에 적합한 파일시스템인 러스터를 위해 S3 버킷과 연동하여 사용 가능

* AWS DMS(database migration service)
    - 온프레미스 DB 와 AWS DB 간의 마이그레이션을 위한 레플리카 복제/전송 지원 서비스
        # 소스 DB 의 레플리카를 생성하여 대상 DB 로 해당 레플리카 데이터를 전송시키는 방식으로 진행
            ~ 소스 DB 는 지속적으로 사용(online) 가능

* AWS SCT(schema conversion tool)
    - 원본 DB 데이터 스키마를 대상 DB 데이터 스키마로 변환시켜주는 서비스
        # DB 마이그레이션 진행 시 사용
* AWS DataSync
    - 스토리지 시스템과 서비스 간의 데이터 이동 혹은 마이그레이션을 도와주는 서비스
        # NFS, SMB, S3, EFS, FSx 등으로 데이터를 전송시킬 수 있음.

* AWS Backup
    - AWS 서비스에 대한 백업 기능 제공 서비스, 백업된 데이터는 별도의 백업볼트에 저장됨
        # 백업된 데이터에 대한 다른 리전으로 옮기거나, 특정 기간동안의 백업본 보유 기간 설정 가능
        # lifecycle 정책을 통해서 백업된 데이터에 대한 수명 정책을 설정할 수 있음

* AWS Network Firewall
    - 트래픽 검사 및 트래픽 필터링 : VPC 에 대한 규칙 생성하여 가능

- AWS Shield
    - advanced : 유료, DDoS 탐지/방어 가능, Cloudfront/Route53/ELB 와 통합 가능

- AWS WAF
    - 웹 보안 방화벽 서비스, ACL 형태로 제한 정책 설정
        # cloudfront 앞에 배치하여 s3 오리진 컨텐츠 배포를 대신할 수 있음
          enable cloudfront distribution 체크.
        # 특정 리전/IP 대역에 대한 허용/거부 정책 설정 가능

* AWS SSO
    - Single-Sign-on
        # 사용자가 AWS 리소스에 접근할 때 받아야 하는 일회성 인증 방식 체계(AAA, kerberos)
          지금은 Identity center 로 바뀜

* AWS System Manager
    - Parameter Store
        # DB 접속 시 필요한 USERNAME/PASSWORD 정보를 관리 가능.
          저장된 민감한 값에 대해 암호화/복호화를 하기 위해서 KMS 키를 사용하여 가능.
    - Run command
        # 서드파티 제품을 사용한 하이브리드 인프라의 경우 사용하는 명령어가 다를 수 있기 때문에
          일괄 관리가 필요할 경우 run command 에서 명령어를 사용

* AWS Secrets Manager
    - Authentication for DB
        # 자격 증명을 저장/관리, 다중 리전에 복제 가능, 생명주기에 따른 자동 교체 가능

* AWS Certificate Manager
    - SSL/TLS 인증서를 관리해주고 다른 AWS 서비스에 연동시켜주는 서비스
        # API Gateway 에 인증서를 연결하고,
          해당 API Gateway endpoint 를 도메인 이름과 연결시킨 뒤,
          Route 53 에 해당 도메인 이름에 대한 A record 를 생성하면,
          API calls '도메인이름' -> API Gateway(with 인증서 = SSL(HTTPS)) -> 백엔드 도달
        # ELB 에 적용시켜 SSL/TLS 인증을 통한 보안 통신이 가능
            ~ 이 경우, Security Policy 적용이 필요함.

* AWS Config
    - detect not-properly configured Resource
        # rule 에서 정의한 내용대로 설정들이 제대로 들어갔는지 점검할 수 있는 기능
    - track configuration
        # 설정값에 대한 기록들을 확인할 수 있는 기능