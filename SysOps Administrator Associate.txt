 1. 클라우드 관리
    * 수동
        - AWS 관리 콘솔
        - AWS API
        - AWS CLI
    * 자동
        - AWS CloudFormation(Infrastructure as Code; 소스 제어 시스템에 저장된 템플릿)
            # Infrastructure as Code
                ~ 간편한 유지관리
                ~ 손쉬운 보안 설정
                ~ 신속한 설계 가능
                ~ 뛰어난 확장성
2. AWS 클라우드
    * 필요한 만큼한 사용하고 사용한 만큼만 비용 지불
    * EC2 를 활용한 서버-클라이언트 구조(클라우드 컴퓨팅 배포) 구축 가능
        - EC2(Elastic Compute Cloud) : 가상 서버
        - 클라우드 컴퓨팅 배포
            # 클라우드 배포 : 모든 리소스가 클라우드 기반
            # 온프레미스 배포 : 프라이빗 클라우드 배포, 기존 물리 방식
            # 하이브리드 배포 : 온프레미스 인프라 리소스 + 클라우드 리소스
3. 요금
    * 온디맨드
        - 사용한 만큼 지불
        - 불규칙적 단기 워크로드에 적합
    * Savings Plans
        - 사용량을 1년/3년 약정, 온디맨드 요금의 최대 72% 절감
        - 약정 사용량까지는 Savings Plans, 초과 사용량은 온디맨드
        - Cost Explorer 를 통해 사용량 분석 가능
            # Savings Plans 를 위한 맞춤 권장 사항 제공 가능
    * 예약 인스턴스
        - 온디맨드 결제 할인 옵션
        - 표준, 컨버터블 예약을 1년/3년 약정
        - 약정 기간 끝나면 온디맨드로 변환됨
    * 스팟 인스턴스
        - 미사용중인 EC2 리소스를 사용하여 온디맨드 요금의 최대 90% 절감
        - 시작/중단/종료가 자유로운 워크로드에 적합
            # 리소스가 없거나 사용불가, 수요가 늘면 인스턴스 중단될 수 있음
    * 전용 호스트
        - 물리 서버
4. EC2
    * 시작 & 연결
        - 인스턴스 시작
            # OS, APP 등이 포함된 기본 구성 템플릿 선택 가능
            # 인스턴스 유형에서 하드웨어 구성 변경 가능
            # In/Out 네트워크 트래픽 보안 설정 지정
        - 인스턴스 연결
            # 프로그램 등에 직연동하여 데이터 교환
            # 하이퍼터미널 등을 통해 인스턴스에 직접 엑세스 가능
    * 유형
        - 범용
            # 기본
        - 컴퓨팅 최적화
            # 고성능 처리
        - 메모리 최적화
            # 방대한 데이터 처리
        - 스토리지 최적화
            # 고성능 IOPS(초당 입출력 수; 스토리지 성능 지표) 처리
        - 엑셀러레이티드
            # 데이터 처리 가속화
    * EC2 Auto Scaling
        - 수평적 자동 확장 서비스
        - 동적 조정
            # 수요 변화에 동적으로 대응하여 인스턴스 추가/제거
        - 예측 조정
            # 미리 예측한 수요에 따라 인스턴스 자동 예약
        - 그룹
            # 최소 용량
                ~ 최소 인스턴스 설정
            # 희망 용량
                ~ 희망 인스턴스 설정(없으면 최소 용량과 동일)
            # 최대 용량
                ~ 최대 인스턴스 설정(필요시 자동 확장되는 범위)
    * ELB(Elastic Load Blancing)
        - '외부 트래픽 > ELB > Auto Scaling' 구조
        - 프론트앤드는 물론 백앤드에서도 적용되는 리전 형태
    * SQS(Simple Queue Service)
        - 모놀리식 어플리케이션 서비스의 단점
            # 밀결합된 구성요소 구조로 한 요소의 장애가 전체 장애로 발전 가능
        - 마이크로 어플리케이션 서비스 접근 방식 사용
            # 구성요소 간의 Payload(데이터가 포함된 메시지) 전송/처리 보조
            # 대기열(Queue) 방식으로 메시지를 전송/저장/검색 가능
    * SNS(Simple Notification Service)
        - 게시/구독 서비스
            # 게시자는 그룹화된 주제에 따라 메시지 전달
            # 구독자는 구독한 그룹의 주제에 따라 메시지 수신
                ~ 일반 사용자(A2P), 다른 어플리케이션(A2A)
5. Serverless Computing
    * EC2 는 지속적으로 인스턴스 관리를 해줘야하는 번거로움이 있음
    * 오로지 어플리케이션(코딩)만 신경쓰고 나머지는 자동으로 처리
    * Lambda 서비스
        - 단순 서비스(코드)만 실행할 수 있는 서비스
            # 이벤트 소스에서 트리거되도록 설정하여 필요시에만 실행되게 함
        - 서비스(코드)를 실행한 동안만 요금 부과
    * ECS(Elastic Contrainer Service)
        - Docker 를 사용한 컨테이너 관리 서비스
            # Container 란 어플리케이션 코드, 종속성을 하나의 객체로 패키지한 것
        - EC2 에서도 사용 가능
    * EKS(Elastic Kubernetes Service)
        - Kubernetes 를 사용한 컨테이너 관리 서비스
        - EC2 에서도 사용 가능
    * Fargate
        - 컨테이너 서비스(ECS, EKS)에 적합한 컴퓨팅 시스템
6. 글로벌 인프라(리전)
    * 선택사항
        - 거버넌스(정부 지침) 및 법적 요구사항 준수
        - 접근성
        - 기능 가용성
        - 요금
    * AZ(Available Zone; 가용영역)
        - 인스턴스를 다른 AZ 에 분산시켜서 운용하여 HA(High Availability) 충족
        - 리전에 AZ 가 포함
    * 엣지 로케이션
        - 리전과 물리적으로 멀리 떨어진 곳의 새로운 가용영역
        - outposts 를 사용하면 자체 로컬에 AWS 리소스를 그대로 사용하듯 구축 가능
        - CloudFront(CDN 서비스) 를 통해 리전의 데이터 사본을 고객에서 캐싱
7. 인터페이스
    * Management Console
        - 웹 GUI 기반의 수동 관리 인터페이스
    * CLI(Command Line Interface)
        - 자동 관리를 위한 API 요청을 수행하는 시간을 절약해주는 서비스
        - API(Application Programing Interface)
            # 어플리케이션의 자동 실행을 구현하는 인터페이스
            # 코드로 자동 관리/실행이 가능
    * SDK(Software Development Kit)
        - 소프트웨어 개발 키트
    * Elastic Beanstalk
        - 자동 인스턴스 프로비저닝을 위한 서비스
        - 사용자가 코드 및 구성 설정을 제공하면 자동 구성
            # 용량 조정
            # 로드 밸런싱
            # 자동 조정
            # 모니터링
    * CloudFormation
        - 자동 인스턴스 프로비저닝을 위한 서비스
        - 인프라 자체를 코드로 취급 가능
        - 오류 감지 시 변경 사항을 자동으로 롤백
8. 네트워크
    * VPC(Virtual Private Cloud)
        - 서브넷으로 섹션을 격리하여 리소스를 배치하고 사용할 수 있는 서비스
        - 게이트웨이를 통해 VPC 로 트래픽 송수신
            # Virtual Private Gateway 를 통해 사설 서브넷 VPC 통신 관리 가능
    * Direct Connect
        - B2B 전용 회선
        - 별도의 리전 내 전용 회선 팀과 상의하여 물리 회선 제공받아야 함
    * ACL(Access Control List) & 보안 그룹
        - VPC 를 구성할 때 기본 네트워크 ACL 이 포함되어있음
            # 사용자 지정 ACL 생성 적용 가능
            # ACL 은 항상 적용되는 가상 방화벽으로 상태 비저장 필터링 제공
        - EC2 생성시 기본 보안 그룹에 모두 포함되어있음
            # 기본값은 인트래픽 거부, 아웃트래픽 허용
            # 사용자 지정 규칙을 추가 적용 가능
            # 상태 저장 필터링 제공
    * Route 53(DNS 서비스)
        - AWS 자체 DNS 서비스로 다양한 컴퓨팅 시스템에서 사용 가능
9. 스토리지 및 DB
    * EBS(Elastic Block Store)
        - AZ 단위의 저장 공간(블록 스토어) 서비스
        - 블록 방식으로 데이터 수정 후 수정된 부분만 업데이트 가능
        - 스냅샷(Snapshot) 기능으로 증분 백업/복구 가능
    * EFS(Elastic File System)
        - 리전 단위의 저장 공간(파일 시스템) 서비스
        - 파일 시스템 단위로 데이터 읽기/쓰기가 가능하고 다중 인스턴스에 동시 작업 가능
        - 파일 시스템 단위로 저장되어 저장공간이 자동으로 확장/축소
    * S3(Simple Storage Service)
        - 객체 스토리지의 구성요소는 데이터, 메타데이터, 키
            # 데이터는 실제 데이터
            # 메타데이터는 데이터의 내용,크기 등의 대략적인 정보
            # 키는 고유 ID
        - 객체 방식으로 데이터 수정 후 전체 객체(파일) 업데이트 진행
        - S3 데이터를 버킷에 객체로 저장하는 서비스
            # 최대 객체 파일 5TB
            # 파일 업로드 시 권한 설정으로 엑세스 제어 가능
            # 버전 관리 가능
        - 데이터 검색 빈도, 필요 데이터 가용성에 따라 클래스 선택 가능
            # Standard
                ~ 자주 엑세스할 때
                ~ 최소 3개의 AZ 에 저장됨
            # Standard-IA(Infrequent Access)
                ~ 자주 엑세스하지 않을 때
                ~ 스토리지는 저렴, 사용 비용은 비쌈
            # One Zone-IA
                ~ 단일 AZ 에 저장
                ~ Standard-IA 보다 저렴
            # Intelligent-Tiering
                ~ 엑세스 패턴이 불규칙할 때
                ~ 객체를 모니터링 후 자동으로 각 클래스 계층으로 분류
                ~ 객체당 소량의 자동화 요금 부과
            # Glacier
                ~ 데이터 보관용 저비용 스토리지
                ~ 객체를 몇 분 혹은 몇 시간 이내 검색
            # Glacier Deep Archive
                ~ 가장 저렴한 보관용 스토리지
                ~ 객체를 12시간 이내 검색
    * RDS(Relational Database Service)
        - 관계형 DB 는 데이터 - 데이터 간의 연관된 방식(행, 열로 구분)을 저장하고 쿼리
            # 정해진 테이블에는 동일한 속성(Attribute)값만 들어가있어야 하는 고정적인 방식
            # 정적 스키마를 사용하므로 모든 테이블의 데이터를 유연하게 수정하지 못함
        - AWS RDS
            # AWS 환경에서 관계형 RDS 를 사용할 수 있는 서비스
            # HDD 고가용성 프로비저닝, DB 설정/패치/백업 자동 관리 서비스 제공
            # Lambda 서비스를 사용하여 Serverless 어플리케이션 + DB 쿼리 자동화 가능
        - AWS Aurora
            # 기업형 RDS 엔진(MySQL, PostgreSQL 호환)
                ~ 기존 RDS 엔진보다 3~5배 빠름
            # DB 리소스 안정성과 가용성 유지 및 불필요한 IO 작업을 최소화
                ~ 비용 최대 1/10 로 절감
            # 3개의 복사본을 3개의 AZ에 복제하고 S3 에 지속적으로 백업
    * NRDS(Non-Relational Database Service)
        - 비관계형 DB 는 키를 생성하여 그 위에 데이터를 저장하고 쿼리
            # 키 위에 저장되는 속성값은 모두 동일한 속성값을 가질 필요가 없어 유연함
        - AWS DynamoDB
            # Serverless DB 서비스
                ~ 모든 규모에서 엄청나게 빠른 응답속도
            # 기존의 RDS 와 다르게 빠른 처리 속도로 다량의 작업량 수행 가능
    * Redshift
        - 