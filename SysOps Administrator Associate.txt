* 실습 참고
    - http://tessv5-lab.applaycrew.com/

* ELB
    - Security Group
        # 기본 보안 그룹 생성은 총 2개로 소스 보안 그룹 + 'Ingress <-> Back-end 매핑' 보안 그룹
	- Security Policy
        # 클라이언트 <-> ELB 간의 SSL 접속 협상을 위해서 Security Policy 를 사용한다.
          TLS 1.0, 1.1, 1.2, SSL 2.0, 3.0 버전을 지원한다.
        # ELB 에 별도의 Security Policy 가 설정되어있지 않다면, ELB 는 기본값으로 가장 최신 버전의
          Security Policy 을 가져온다.
            ~ 'ELBSecurity Policy-2014-01' 버전의 Security Policy 가 SSL 암호화를 지원한다.
        # Server Order Preference 를 통해서 어떤 암호화 방식을 사용할 것인지 설정할 수 있다.
    - Sticky session
        # 사용자의 서비스 접속을 위한 세션을 특정 EC2 인스턴스에 바인딩 해주는 기능.
          동일 사용자로부터 들어오는 요청은 바인딩된 동일 인스턴스를 향해 리다이렉션 처리한다.
    - Connection draining
        # 백엔드 인스턴스가 비정상적인 상태에 빠졌을 경우 대기 임계 시간을 갖고 연결을 지속시키는
          기능로, 기본값은 300 초(5분), 최소 1초 ~ 최대 3600 초(60분) 설정 가능하다.
          Auto-Scaling 서비스가 켜져있는 경우 해당 해당 인스턴스는 자동 제거된다.
        # EC2 콘솔을 통해 ELB 에 접근하거나, CLI 를 통해서 해당 기능을 ON|OFF 할 수 있다.
    - Activity monitoring
        # CloudWatch Metrics, S3 버킷에 저장된 ELB Logs, API 호출을 통한 CloudTrail 을 통해
          사용자는 ELB 활동에 대한 모니터링 정보를 수집할 수 있다.
        # ELB Health-check 는 내부적으로 ELB 에 의해 동작하는 기능일 뿐 모니터링과 관련 없다.
    - Pre-warming
        # ELB 는 사전 예열을 할 필요가 없는 서비스이지만, 필요에 따라 사전 예열을 통해 급작스러운
          트래픽 증가량에 대처할 수 있도록 설정할 수 있다. 이때, 이벤트 시작/종료 일자와 트래픽
          증가량 등의 정보가 추가적으로 필요하다.
    - Adding AZ
        # ELB 에 AZ 를 추가하고 싶으면 AWS 콘솔, CLI 를 통해서 하는 방법과 ELB 에 직접 추가
          하는 방법이 있다.
            ~ elb-enable-zones-for-lb
    - IPv4/6
        # ELB 는 IPv4/6 를 모두 지원한다. 하지만 백앤드로 향하는 트래픽은 언제나 IPv4 로 변환되어
          포워딩된다.
	- Log
        # 프론트앤드 처리시간에 대한 로그는 확인할 수 없다.
		# {Bucket}/{Prefix}/AWSLogs/{AWS AccountID}/elasticloadbalancing/{Region}/{Year}
		  /{Month}/{Day}/{AWSAccount ID}_elasticloadbalancing_{Region}_{Load Balancer Name}
		  _{End Time}_{Load Balancer IP}_{Random String}.log

* SES
    - Simple Email Service
        # 이메일 수신/발송 서비스

* SNS
    - Sending notification
        # 사용자의 구독 요청에 따라 SQS, SMS, Email/Email(JSON), HTTP/HTTPS 로 전송 가능하다.

* SQS
    - Sequencing information
        # SQS 는 선입선출(FIFO)을 보장하지 못한다(어떻게든 전달만 하면 되니까). 하지만 시스템 상
          메시지의 순서가 중요할 경우 대기열에 있는 메시지에 Sequencing information 을 배치해서 
          반환할 때 메시지 순서를 재정렬할 수 있다.
    - Retain Messages
        # 기본값으로 대기열에 추가된 메시지는 4일동안 유지되며, 사용자 지정 기간동안 메시지를
          유지시킬 수 있다.
    - Deletion Queue
        # 사용자는 대기열에 올라와있는 메시지를 삭제시킬 수 있다.
        # SQS 의 작업들이 정상적으로 동작하지 않은지 30일 이후에는 아무런 알림 없이 Queue 를
          삭제할 수 있다.
    - SQS 주소체계
        # http://sqs.<AZ>.amazonaws.com/<12bit ID>/<QueueName>

* CloudFormation
    - Application Management
        # 이 제품은 기본적으로 무료지만 생성된 서비스에 대해서만 요금을 받는다.
          application bootstrapping 을 제공하여 소프트웨어 패키지 설치, 폴더 생성을 지원하고
          그 외 다양한 AWS 서비스(EC2, EBS, RDS 등)를 지원한다.
        # 유일한 문제는 DevOps 모델을 따르지 않고 사용자가 직접 정의한 템플릿에 의해 동작한다.
        # AWS Elastic Beanstalk 또한 비슷하게 자동 배포를 지원하지만, 개발 환경 및 어플리케이션
          실행에 집중한 배포만을 제공한다.
    - Stack
        # Stack 만들어 정해진 순서에 맞추어 배포가 진행된다!(In-Orderly-Deployments)
          만약 생성 중 하나랄도 실패하면 모든 생성 리소스가 Rollback 된다.
        # 정해진 순서에 맞춰 구동시키는(마치 도커의 Dockerfile 순서처럼) 방식을 위해
          WaitCondition 을 사용해 의존성에 따른 리소스를 우선 배치하게 할 수 있다!
    - Limitation
        # Stack 은 계정당 20개가 제한한다. Template 는 제한이 없다.
          Template, Parameter, Output, Resource description 의 글자수는 4096 으로 제한한다.
          Template 에는 최대 60개의 Parameter 와 60개의 Output 이 포함될 수 있다.
    - Required components
        # 구성에 필요한 유일한 요소는 리소스!
    - Reusable, repeatable, safe template
       # 재사용 가능하며 안전하게 반복 사용이 가능한 단일 템플릿을 구성하기 위해선
         parameter(매개변수)를 통해서 리소스를 프로비저닝 하면 된다.

* OpsWorks
    - Configuration management
        # Puppet 또는 Chef 를 사용하여 온프레미스 혹은 클라우드에서 어플리케이션 구성, 배포를
          자동화하는 구성 관리 서비스다. Chef 는 관리 서버의 구성 정보를 Chef Recipe 에서
          관리하고 이를 저장하기 위한 중앙 저장소도 제공해준다.
          Puppet 은 웹기반 콘솔을 통해 운영 관리가 가능하다.
    - Deploying DB instance step
        # 신규 인스턴스에 대한 레이어를 추가하고, Recipe 에 인스턴스 배포에 대한 Action 을 추가한다.
          DB 인스턴스 접속에 필요한 변수들(host, user, password 등)을 .json 형식으로 작성한다.
            ~ [:deploy][:app_name][:database]
          사용자 지정 Repice 를 통해 어플리케이션 인스턴스와 DB 인스턴스간의 연결을 설정해준다.

* VPC
    - Default settings
        # 기본 VPC 설정만으로 EC2 인스턴스가 기동되면 오직 Private IP 만 할당된다. 동일 서브넷
          인스턴스들은 내부 통신이 되겠으나, 인터넷으로의 통신은 Public IP 미할당으로 불가능하다.
        # 기본 VPC 는 모든 In/Out 트래픽에 대해 Allow 한다.
            ~ 기본 ACL 은 모든 In/Out 트래픽에 대해 Deny 한다.
        # 한 번 세팅이 끝난 VPC 는 사이즈 변경을 할 수 없다.
        # VPC 는 인스턴스 레벨에서, ACL 은 서브넷 레벨에서 동작한다.
    - VPC Wizard
        # VPC 마법사를 통해 생성할 경우 Public, Private 서브넷 설정이 포함되었을 경우 자동적으로
          퍼블릭 서브넷에 NAT 게이트웨이가 생성되고 Private 서브넷과 연결된다.
          만약 VPC 를 삭제하려고 한다면 NAT 게이트웨이가 구동중인 동안에는 삭제할 수 없다!
    - Overlaps IP communication
        # VPC 는 외부 인터넷과 통신 시 소스가 VPC 내의 네트워크 대역 그리고 서브넷들의 대역과 겹치는
          트래픽을 드랍시킨다.

* EC2
    - Choosing AZs
        # AWS 에서는 EC2 시작 시 AZ 를 선택하지 않는 걸 권장한다. AWS 가 자동으로 최적의 AZ 를
          골라주기 때문이다!
    - Changing AZs
		# 일단 한 번 시작된 EC2 인스턴스는 AZ 변경을 할 수 없다. 다른 AZ 에 인스턴스를 구동하고
		  싶다면, AMI 를 생성하여 구동시키는 방법 뿐이다.
    - Troubleshooting
        # 인스턴스에 문제가 생겨 정상적인 접속이나 서비스 응답이 없을 경우, 해당 인스턴스를 중지
          후 다시 스타트 시켜 정상적인 시스템이 재배포될 수 있도록 해본다.
    - Placement group
        # EC2 인스턴스끼리 적은 대역폭 사용으로 짧은 응답시간을 가지고 상호작용할 수 있는 기능
            ~ 단일 AZ 에 논리적으로 그룹화하는 기능
            ~ 10Gbps 네트워크 성능
    - Metadata
        # EC2 인스턴스의 정보를 콘솔이 아닌 Software 방식으로 확인하려면 metadata 를 확인하면 된다.
    - Scaling Plan
        # 이벤트 등으로 확장이 필요할 경우를 대비해 Spot Instance 를 사용할 수 있다.
          기존 EC2 보다 70~90% 저렴한 가격으로 인스턴스 기능을 사용할 수 있다.
          하지만 전체 EC2 인스턴스가 부족해지면 스팟 인스턴스가 종료되므로 안정성은 떨어진다.
    - DR(Disaster Recovery; Redundancy from multi-region)
        # EC2 인스턴스를 시작하려면 해당 리전에서 사용할 수 있는 AMI 가 필요하다.
          만약 원하는 AMI 가 특정 리전에서 사용이 불가한 경우, AMI 사용이 가능한 리전에서 복사 후
          특정 리전에서 사용할 수 있게 복사해오면 된다.
    - Convert AMI from instance
        # 리눅스 기반 인스턴스는 AMI 변경이 가능하지만, 윈도우 기반 인스턴스는 AMI 변경이 불가능하다.
    - Creating AMI from running instance
        # 구동중인 EC2 인스턴스를 통해 AMI 를 생성하고 생성이 완료되면 실행 권한을 부여할 수 있다.
          AMI 생성 시 AWS 계정 ID, AWS access/secret access key, X.509 인증 정보가 필요하다.
    - Checking Log in EC2 Console
        # 윈도우 기반 EC2 콘솔창에서는 최근 3건의 시스템 에러 로그를 확인 가능하고,
          리눅스 기반 EC2 콘솔창에서는 콘솔 출력 결과물만 보인다.
    - Cost
        # 인스턴스가 리부팅 되는 경우는 요금이 부과되지 않는다.
          그러나 정지 후 재가동 하는 경우 요금이 부과될 수 있다...
    - Auto-Recovery
        # EC2 인스턴스 자동 복구 기능을 사용하려면 EBS 볼륨만을 사용하고, 인스턴스 Tenancy 를 기본으로
          설정해줘야 한다.
    - Troubleshooing
        # InsufficientInstanceCapacity : AZ 내 사용자 요청을 처리할수있는 유효한 인스턴스가 없다.
        # DisableApiTermination : 실수로 EC2 중지시키지 않게 설정할 수 있다.
        # 만약 인스턴스를 실행시키는 데 문제를 확인하고 트러블슈팅하기 위해서 정보가 필요하다면,
          EC2Resque 를 통해서 시스템 로그를 수집하고 분석하면 된다.

* Auto Scaling Group
    - Cooldown period
        # Desired Capacity 에 의해 한 번 스케일링이 끝나고 다음 스케일링을 진행하기까지 기다리는 시간
          으로 이 시간동안은 CloudWatch Alarm 등으로 값이 변동되지 않는다.
    - Aggregate Statistics
        # 동일 그룹 내 존재하는 모든 EC2 인스턴스에 대한 집계된 통계를 확인할 수 있다.
          모든 리전에서 수집되므로, CloudWatch 의 단일 리전 내 통계보다 광범위하다.
    - Billing
        # Auto Scaling 실행에는 돈이 들지 않는다!
    - Command
        # as-terminate-instance-in-auto-scaling-group <Instance ID> \
          --no-decrement-desired-capacity
          인스턴스를 종료하는 명령어로 해당 옵션이 붙으면 종료하면서 Desired capacity 를 1 로
          줄이지 않고 그대로 유지시킨다.
    - Schedule
        # Linux Crontab 처럼 반복 예약 작업을 설정할 수 있다. 최대 1달의 예약이 가능하다.
          종료 시간, 반복 정보가 설정에 필요하다.
        # 만약 중복되는 스케쥴이 있는 경우 에러 메시지와 함께 중복되는 스케쥴은 실행이 거부된다.
    - Metrics limitation for CloudWatch
        # 1개의 Dimension(AutoScalingGroupName)과 8개의 Metrics를 지원하며 그 종류는 다음과 같다.
            ~ Group{MinSize, MaxSize, DesiredCapacity, InServiceInstances, PendingInstances,
                    StandbyInstances, TerminatingInstances, TotalInstances}
    - Detailed Monitoring with CloudWatch
        # 기본적으로 Auto Scaling Group 은 CloudWatch Detailed Monitoring 이 Enable 되어있다.
            ~ AutoScaling Launch Config -> InstanceMonitoring.Enabled 플래그 = True
            ~ 만약 Launch Configuration 생성 시 Detailed Monitoring 플래그를 False 로 하면
              다음 단계를 거쳐서 다시 활성화 시킬 수 있다.
              1) Launch Configuration with detailed monitoring flag=true 신규 생성
              2) Auto Scaling Group 을 새로 생성한 Configuration 으로 업데이트하기
              3) EC2 인스턴스의 Detailed Monitoring 활성화
    - Marked health check
        # 만약 수동으로 인스턴스를 리부팅시키거나 기타 이유로 Auto Scaling Group Health Check 가
          failed 나서 의도치 않게 인스턴스가 삭제되려고 한다면, 해당 인스턴스의 health 상태를
          healthy 로 변경하는 명령어를 통해서 방지할 수 있다.
    - Suspended Processes
        # Terminate 프로세스를 중지시킬 경우 AZRebalancing 프로세스는 설정된 Maximum size 보다
          10 퍼센트 더 큰 사이즈로 인스턴스를 실행시킨다. 이는 Terminate 프로세스가 재시작될 때까지
          지속된다.
    - Failed to launching instances
        # 만약 반복적으로 인스턴스를 구동하는데 실패한다면 Auto Scaling Group 은 Scaling Precess
          를 멈춘다.
    - Delete Auto Scaling Group
        # 만약 Auto Scaling Group 을 삭제하고 싶다면, Mininum, Desired 를 모두 0 으로 설정한다.
          콘솔로는 절대 지울 수 없다!
    - Merge Auto Scaling Group
        # 2개 이상의 AZ 에 각각의 Auto Scaling Group 을 병합하고 싶을 땐 그저 하나의 Auto Scaling
          Group 을 모든 AZ 에 적용될 수 있도록 업데이트 하고 나머지 하나를 삭제하는 방법 뿐이다.
    - Bastion Host
        # 침입 방지/차단 소프트웨어가 설치된 일종의 게이트 역할을 수행하는 호스트
        # 특정 Auto Scaling Group 에 여러개의 AZ 를 포함시키고 Min/Max 사이즈를 1로 조정한 뒤
          해당 그룹에 포함시켜 인스턴스를 구동시킨다.

* Route 53
    - Alias resource record
        # CNAME 처럼 등록할 수 있지만 사용자가 확인할 수 없고 단순히 IP  정보만 확인할 수 있다.
          루트 도메인이나 네이키드 도메인처럼 최상단 도메인 서버를 구성하려고 할 때 유용하다.
    - Routing
        # 리전 별 트래픽 통제를 위해 Weighted Routing Policy 를 적용시켜 트래픽 처리량을 효과적
          으로 분배시킬 수 있다.
            ~ A 로는 40% 만, B 로는 60% 만 흐르게 설정 가능

* ENI
    - Failover
        # 기본 인스턴스 생성 시 ENI 가 있어야 하며, 하나의 서브넷에만 연결된다.
          ENI 속성에서 '인스턴스 종료시 삭제' 를 비활성화 시키고 새로 생성하여 인스턴스에 기본 ENI
          대신 연결해놓고, 장애가 발생할 경우 detach 하여 다른 정상 인스턴스에 attach 할 수 있다.

* EFS
    - Encryption
        # EFS 파일시스템을 암호화 하고 싶다면 신규 암화화된 EFS 파일시스템을 생성하고 기존의 EFS
          파일시스템에서 데이터를 복사해와야 한다.

* EBS
    - Out of space
        # EBS 볼륨의 용량 부족 문제를 해소하기 위해서 Elastic Volumes 기능을 사용해 기존의
          볼륨 사이즈를 늘릴 수 있다!
    - Encryption
        # AES-256 방식으로 암호화되며, 새 볼륨을 만들거나 인스턴스 <-> 스토리지 간 데이터 전송
          중에도 암호화된다. 스냅샷의 모든 데이터와 I/O 에 대해서도 암호화된다.
        # 만약 사용자가 암호화된 볼륨 혹은 데이터를 공유하고 싶다면, 유일한 방법은 해당 데이터를
          비암호화 볼륨으로 복사한 다음 해당 볼륨을 공유하는 방법 밖엔 없다.
        # 프리 티어 사용자는 암호화 기능을 사용할 수 없을 것이다. 최소 m3 이상의 EC2 인스턴스만
          지원하기 때문이다.
    - Improve performance
        # SSD 를 지원하며 EBS 에 최적화된 인스턴스를 사용해서 인스턴스가 EBS 의 IOPs 를 완벽하게
          프로비저닝한 상태로 사용할 수 있게 할 수 있다.
    - Pre-warming
        # EBS 볼륨을 처음 접근할 때 초기화 작업으로 인해 IOPS 감소 현상이 발생한다. 이를 피하기 위해
          Pre-warming 작업을 해주면 좋다. 작업 하기 전 마운트 해제를 먼저 해주고 난 뒤,
          리눅스 환경 기준으로 'dd if=/dev/zero of=/dev/null bs=1M' 으로 빈 볼륨에 1M 만큼의
          IO 를 발생시켜 IOPS 를 발생시켜준다.
    - PIOPS from EBS volume
        # 예상(Provisioned)할 수 있는 최적의 성능(IOPS)은 다음과 같다.
          볼륨 크기(100G) * 30 = 최대 IOPS(3000 IOPS)
        # 그 밖에 성능에 영향을 줄 수 있는 요소들은 네트워크(10G 이상), EC2 인스턴스가 EBS 최적 제품인지,
          어플리케이션의 성능 등이 있다.
    - Snapshot
        # 스냅샷 생성이 진행중일 때에도 EBS 볼륨은 계속 사용이 가능하다.

* S3
    - Regional self-replication
        # 동일 리전 내 S3 끼리는 데이터를 서로 자동으로 복제하여 관리한다
    - Transfer data to S3 bucket
        # 클라이언트 <-> S3 버킷의 데이터 전송을 빠르고 안전하게 하기 위해 최적화해주는 기능이다.
    - Resource Access Policy
        # S3 ACL : ACL Policy 를 이용하여 AWs 계정 또는 그룹, 사용자에 대한 접근 권한 설정
            ~ 버킷 또는 객체에 대한 ACL (폴더는 대상이 아니다!)
        # S3 Bucket Policy : 버킷 안의 객체들에 대한 접근 권한 설정
        # User Access Policy : IAM 정책을 통해 S3 접근 권한 설정
    - Encryption with versioning S3
        # S3 버전을 통해서 각 객체를 따로 관리할 수 있으며, 사용자 혹은 서버 측에서 암호화를 진행할 수 있다.
          서버 측 암호화는 데이터를 받는 서비스에 의해 암호화하여 데이터가 저장되는 방식이고,
          사용자 측 암호화는 데이터가 S3 로 전달될 때 해당 로컬에서 암호화하는 방식이다.
        # S3 Key 를 사용한 AES-256 방식의 SSE-S3 은 비용이 없으며, KMS key 를 사용한 SSE-KMS 은 비용이 있다.
          사용자 제공 Key 를 사용한 SSE-C 도 있다.
        # 사용자의 SSE-C 키를 S3 가 받아서 사용하기 위해선 S3 버킷 버전 관리를 활성화해야만 한다!
          그리고 사용자의 키를 S3 버킷은 저장해두질 않으므로 사용자는 매번 키를 변경해야한다.
          S3 버전 관리를 활성화하면 각 버전에 대한 객체의 개별적인 암호 키를 가질 수 있다.
            ~ x-amz-server-side-encryption-customer-key : 사용자 키를 base64 암호화하여 사용
            ~ x-amz-server-side-encryption-customer-key-MD5 : 암호화한 키를 MD5 를 통해 무결성 확보
            ~ x-amz-server-side-encryption-customer-algorithm : 사용자 키에 대한 암호화 방식 확인
    - Remove server-side-encryped-bucket
        # 암호화된 버킷을 CMD 로 지우려면 aws s3 rb s3://버킷이름 --sse 옵션을 사용한다.
    - Accidental delete
        # 버전 방식으로 관리되는 S3 데이터는 즉각적인 복구 능력을 가지고 있으며,
          MFA 방식(OTT 등의 2차 인증을 통한 접근)의 보안 설정이 가능하다.
    - Upload folder
        # S3 에 폴더를 업로드 하기 위해서는 Enhanced Uploader 옵션을 활성화 시켜야한다.
    - Serving private data through CloudFront
        # Pre-Signed S3 bucket URL 을 통해서 인터넷 상의 사용자들에게 Private Data 를 제공할 수 있다.
          이 주소를 통해 CloudFront 로 데이터가 제공된다.
    - Generate daily cost report
        # S3 에 저장되는 데이터를 통해 일일 비용 및 사용 보고서를 저장시키고 다운로드 받을 수 있다.
    - Object size limit
        # S3 는 데이터의 총량과 객체수 제한이 없어 사실상 무제한 저장이 가능하다!
          하지만 단일 객체의 크기 제한은 최대 5TB 이므로 주의할 것!
          업로드할 객체가 100MB 이상이라면 멀티파트(병렬식; Parallel-upload) 업로드 방식을 택할 수도 있다!

* RDS
    - Event Notification
        # SNS 을 통해 RDS 내 이벤트에 대한 알람을 발생시킬 수 있다.
          RDS 콘솔 페이지에서 "Enable" 버튼을 눌러 YES|NO 변경할 수 있다.
    - Encryption
        # RDS 콘솔 페이지에서 "암호화" 버튼을 눌러 암호화할 수 있다.
    - Manual Backup on DB instance
        # DB 인스턴스를 수동 백업하기 위해선 DB 인스턴스의 스냅샷을 찍으면 된다.
    - Automated Backup/Restore data
        # RDS 는 자동 백업 기능이 있어 장애 발생 시 백업본을 통해 빠르게 복원할 수 있다.
          보관 기간은 1일이다. (스냅샷이 아니라 그냥 백업!)
    - Failover switch to standby replicas
        # Main DB 와 replica DB 로 운영 시 오직 Main DB 만 운영되고, 장애 발생 시 replica 가 Main 이 된다.
          하지만 데이터는 동기화되어 문제없다!
        # DNS 서비스를 통해 장애 발생 시 기존 DB 인스턴스에서 백업 DB(replicas)로 라우팅이 조정된다.
          그저 단순히 DNS 레코드가 Active -> Standby 로 조정되는 기능이다.
          어플리케이션은 동일한 DNS host 를 바라보기 때문에 DB 가 Failover 되어도 퍼포먼스에 영향이 없다.
        # 지원하는 DB 제품으로는 MySQL, Oracle, PostgreSQL 이 있다.
          MS-SQL 은 이러한 고가용성을 보장하기 위해 Server Mirroring 라는 기술을 사용한다.
    - Default Maintenance Window
        # AWS 에서는 DB 유지 관리 시간을 제공한다. 기본 시간은 30분, 사용자가 DB 생성시 지정할 수
          있으며, 지정하지 않을 경우 기본 시간을 갖는다.
    - RDS Console
        # 사용자는 콘솔을 통해 DB 로그를 확인, 다운로드, 살펴볼 수 있다.
            ~ Error, Slow Query, General
    - CloudWatch Metrics
        # RDS 는 추가 비용없이 DB 인스턴스들의 지표를 CloudWatch 에 제공한다.
            ~ compute/MEM/storage capacity utilization, I/O activity, DB 인스턴스 연결

* DynamoDB
    - Access table
        # DynamoDB 는 테이블밖에 없기 때문에 IAM 을 통해서 접근 허용 정책을 설정하기 위해선 테이블 생성을
          IAM 사용자 이름과 동일하게 생성해야 한다.

* Redshift
    - Automated Backup/Restore data
        # Redshift 는 자동 백업 기능이 있어 장애 발생 시 백업본을 통해 빠르게 복원할 수 있다.
          보관 기간은 1일이다.

* ElastiCache
    - for redis
        # 싱글 노드 모드, 메인/복제 노드를 한 쌍(Shard)만 구성하는 단일 샤드 모드,
          여러개의 샤드로 구성하는 클러스터 모드가 있다.
    - Memcached
        # 실시간 메모리 캐싱 서비스로 어플리케이션, DB 성능을 가속화하며 일부 서비스에서는
          단순 DB 로도 활용 가능하다. Memcached 와 함께 사용할 수 있는데, 이 중 일부 지표
          로는 Eviction(메모리에서 삭제할 시간 지난 데이터 수), Getmisses(요청에 대해 응답할 수
          없는 요청 수) 등이 있다.
        # Eviction, Getmisses 가 높아지면 클러스터 내 노드 사이즈를 늘리거나 노드 숫자를 늘리자.

* CloudTrail
    - Integrity validation
        # CloudTrail 에서 생성된 로그 파일에 대해 무결성 검증 기능을 사용하면 변조되거나, 삭제되거나
          S3 버킷 등으로 전송된 이후에 변경되었는지에 대해 확인할 수 있다.

* CloudWatch
    - Default metric
        # CPI, DISK I/O, Data Transfer 는 기본 지표값이다.
            ~ Linux 환경에서 Monitoring sciprt 를 사용하면 인스턴스의 MEM, Disk Usage 를 확인할 수 있다.
            ~ 권장 방식은 Monitoring Agent 를 인스턴스에 설치하여 사용하는 것이다.
    - Custom metric
        # 사용자 정의 지표(Metrics, Time(in UTC), NameSpace)를 지정할 수 있으며 사용자는 항상 지정된
          지표값을 캡처하고 CLI, API 를 통해 CloudWatch 에 업로드할 수 있다.
            ~ Sum, Min, Max, Sample Count, Average
            ~ Time : 2주 전 ~ 2시간 앞의 시간까지 지정할 수 있다.
            ~ NameSpace : 지표가 저장되는 일종의 저장소에서 컨테이너로써 구분짓기 위한 이름으로,
                          항상 시작은 'AWS/'로 시작한다.
        # CLI, API(PutMetricData) 를 통해서 사용자 정의 지표를 업로드 시킬 수 있다. 만약 사용자가 파일 형태의
          지표를 업로드하려는 경우, input 명령어를 통해서 보낼 수 있다.
          지표를 업로드할 때는 8 kb HTTP GET 요청, 40 kb HTTP POST 요청의 사이즈 제한이 있다.
        # 사용자 정의 지표는 2분 내로 업로드 되지만, 해당 지표를 확인하기 위해선 15분 정도 소요된다.
        # 서로 다른 소스로부터 같은 NameSpace, Metric 등의 데이터가 들어오면 이 데이터들을 마치
          하나의 데이터처럼 취급한다. 분 단위로 시간이 조금 틀려도 하나로 취합해서 처리한다.
        # CloudWatch 콘솔에서 해당 지표들을 확인하고 싶으면,
          CloudWatch Event 에서 사용자 지표를 추가하여 대시보드로 확인하면 된다!
    - Detailed Monitoring
        # Basic Monitoring 은 매 5분마다 서비스로부터 데이터를 수신받을 수 있지만,
          Detailed Monitoring 은 매 1분마다 서비스에 대한 데이터를 수신받을 수 있다.
          Detailed Monitoring 은 RDS, ELB, Route 53, OpsWorks 를 제외한 서비스에선 추가 요금이 발생한다.
        # CLI 를 통해 모니터링 데이터를 확인하고 싶다면, 'monitoring.<region>.amazonaws.com' URL 사용!
    - EventBridge
        # AWS 서비스에 대한 이벤트를 감지하고 감지된 이벤트에 대해 특정 이벤트를 발생시킬 수 있는
          서비리스 서비스
        # EventBus 를 통해 이벤트를 지정하여 특정 리소스에 대한 이벤트 발생 트리거를 지정할 수 있다.
    - Graph display
        # 사용자 지표 혹은 AWS 서비스를 통해서 생성된 데이터 지표를 그래프 형식으로 볼 수 있다.
          CloudWatch 콘솔에서 URL 혹은 북마크를 제공한다!
        # Y 축 지표를 바꾸고 싶다면 Switch 를 통해서 바꾸면 된다.
    - Test alarm with CLI
        # 사용자는 CLI 를 통해서 알람 상태를 임시적으로 변경하여 테스트해볼 수 있다.
          이 변경사항은 다음 알람이 발생할 때 까지 지속된다.
    - Disable alarm with CLI/API
        # 사용자가 알람이 발생하는것을 일시적으로 피하기 위해서 CLI 에서 mon-disable-alarm-actions,
          API 에서 DisableAlarmActions 을 실행해서 잠시 끌 수 있다.
    - Monitoring of estimated charges(Billing Alarm)
        # 사용자가 CloudWatch 에서 요금 계산 추적 기능을 활성화하면 예상 요금이 계산되어 지표 형태의
          데이터(Metric Data)로 매일 여러 차례 전송되며 이런 지표 데이터는 14일 간 저장된다.
          모든 서비스에 대한 예상 요금 + 전체 예상 요금이 포함되며 이러한 지표를 통해 결제 알람을
          구성할 수 있다. 사용자는 이런 알람 경보에 대한 임계값을 지정하고 수정할 수 있다.

* AWS SWF(Simple WorkFlow)
    - 클라우드 어플리케이션들의 작업 조율 및 상태 관리 서비스

* AWS EMR(Elastic MapReduce)
    - 빅데이터 처리/분석 관리형 클러스터 플랫폼 서비스
        # 데이터 집약적(Data-intensive) 작접 수행을 위해 원하는 만큼의 용량을 프로비저닝 할 수 있다.
            ~ data-mining, machine-learning, log analysis, scientific simulation 등

* AWS Config
    - Compliance check
        # AWS 리소스들의 설정 등이 적합한 규정을 준수하고 있는지 점검할 수 있는 서비스

* Security Group
    - Default
        # EC2 인스턴스가 생성되면 하나의 기본 보안 그룹이 생성된다.
          ELB 가 적용될 경우 ELB 에서 적용되야 할 기본 보안 그룹이 추가 생성된다.

* Root-Level Access
    - Specific services retaining full privileges
        # EC2, Beanstalk, OpsWorks, MapReduce(Master Node) 이 4 개의 서비스는 루트 권한 필요!

* IAM
    - Organizations
        # 주소 체계 : https://<AWS 계정>.signin.aws.amazon.com/console/
            ~ IAM 사용자 혹은 그룹에 영향받지 않는다.
        # 대시보드를 통해서 계정 상태를 파악하고 싶다면 모니터링 기능이 있는 계정을 사용해야한다.
          (Monitor-linked account)
    - Password policy
        # 루트 사용자가 사용자들이 각자의 패스워드를 변경할 수 있도록 설정할 수 있다.
    - Customer managed Policy
        # 제한적인 IAM 관리자 계정을 위해서는 Customer managed policy 를 생성하여 사용자 혹은 그룹에
          연결시키면 된다. 사용자 혹은 그룹은 한개 이상의 정책과 연결될 수 있다.
    - Security policy for privileged users
        # 다단계 인증 방식을 사용하고, 권한 계정을 위한 사용자를 생성하여 사용하면 좋다.
    - Permission
        # IAM Role 을 통해 사용자가 접근 가능한 리소스를 설정하는 것이 가장 관리 좋은 방법이다.
        # 특정 인스턴스에 제한을 주고 싶다면, 인스턴스 생성 시 부여할 수 있는 '태그'를 통해서
          제한하는 방법이 있다!
          "Condition": {"StringEquals": {"ec2:ResourceTag/InstanceType": "Tag"}}
    - Limitation
        # 사용자 당 그룹제한 10개, 계정 당 사용자제한 5000개, 그룹제한 100개, 역할제한 250개
    - Mobile user calls to AWS
        # 모바일을 통한 AWS 동작 요청 등은 IAM 사용자 또는 역할 등으로 제한하지말고 인증 제공자
          (Google, Amazon, Facebook 등)를 통해서 로그인 등으로 인증하는 방식을 추천한다.
    - SAML 2.0
        # 외부 인증제공자(idP)를 통해서 AWS 콘솔에 접근하고 API 호출 등을 진행할 수 있다.
          이 때 필요한 작업으로는 IAM Role 생성 및 인증제공자(idP)의 사용자와 IAM Role 을 매핑
          해줄 수 있도록 assertion(정의) 해줘야한다.

* KMS(CMK; Customer Master Key)
    - Rotation period
        # 새로운 키를 생성하는 방법에는 신규 KMS 키 생성, 주기적으로 KMS 키 생성 이 있다.
          주기적으로 자동 생성하는 키는 매 1년 혹은 사용자에 의해 특정 주기별로 생성되도록
          설정할 수 있다.
        # 키가 새로 생성되면 기존의 키는 관리자가 삭제하기 전까지 남아있는다.

* Disaster Recovery
    - RPO/RTO
        # RPO(Recovery Point Objective; 장애복구 시점 목표)
          ~ 시간 단위로 측정 가능한 데이터 손실량
        # RTO(Recovery Time Objective; 장애복구 시간 목표)
          ~ 장애로 인한 서비스 중단 후 복구까지 걸리는 시간
    - Pilot Write
        # 구동중인 환경의 데이터를 복제하고 핵심 워크로드 인프라의 복사본을 프로비저닝 시켜놓는다.
          평소에는 동작하고 있지 않다가 장애 발생 시 복구 환경 서버가 시작되며 DNS 를 통해
          라우팅 조정되어 장애로 인한 퍼포먼스 임펙트를 없엔다.
    - Full-Active Low-Standby
        # 파일럿 라이트와 비슷하지만, 평소에도 동작한다. 단지 원본 서비스의 리소스만큼을 모두
          구동시켜놓지 않고 저용량으로 실행하고 있다가, 장애 발생 시 모든 리소스를 올릴 뿐이다.
          미리 구동시켜놓기 때문에 RTO 는 좀 더 빠르다.
    - Multi-Site Active-Active
        # 기존 사이트와 동일한 복제본 사이트를 구동시켜 ELB 를 통해 Active-Active 상태로 라우팅
          유지시키고, 장애 발생 시 가중치 라우팅을 통해 복제본 사이트가 모든 트래픽을 처리하는
          방식의 고가용성 장애 대비 구성이다.

* Tags
    - Maximum size of tag
        # 128 개의 유니코드 문자열로 제한된다.

* Billing
    - Programmatic Billing
        # Monthly Billing report 를 활성화하여 CSV 형식의 리포트를 저장시킬 AWS S3 버킷을
          지정하고, 프로그래밍 방식 접근 옵션도 활성화하면 해당 리포트를 참고하여 자동 결제를
          진행시킬 어플리케이션 프로그래밍이 가능하다.
    - Consolidated Billing
        # 통합 결제 시스템은 각 계정이 사용하는 결제에 대한 상세 정보를 확인할 수 있다.
        # 통합 결제 시스템을 통해 조직 단위에서 하나의 결제 대리인 계정을 만들어 통합 결제를 하면
          해당 결제 대리인 계정은 조직 내 다른 계정들의 결제에 대한 정보만 확인이 가능하며,
          그 외 다른 데이터에 대한 정보는 접근할 수 없다.
        # 통합 결제 시스템에 포함되고 싶은 계정은 마스터 계정으로부터 초대 요청을 받아
          들어올 수 있다.
        # 통합 결제 시스템을 사용하면 다른 계정에서 결제한 혜택(Reserved Instance; 예약 인스턴스)
          까지 같이 통합된다는 의미로 시스템 내 다른 계정들에 대해서도 동일한 혜택을 적용받게 된다.
    - Free-Tier
        # 1년 간 무료 사용 가능하며, micro 인스턴스 750 시간 + ELB 750 시간 무료 제공과
          5GB S3 + 30GB EBS 범용 볼륨 사용이 포함된다.
    - Cost allocation tag
        # AWS 리소스에 태그를 '키:값' 형태로 설정하면, AWS 는 cost allocation 리포트를 통해
          해당 ':값' 에 해당되는 사용량과 비용을 집계해서 생성한다.
            ~ 키는 중복되면 안되지만, 값은 중복되도 상관없다.
        # Billing Management 콘솔에서 Cost Allocation 보고서 작성을 선택할 수 있다.(체크박스)
          그러면 AWS Lambda 함수를 통해서 리소스들의 메타데이터를 읽어들이고, DynamoDB 테이블에
          리소스에 지정된 특정 태그를 저장시킨다.