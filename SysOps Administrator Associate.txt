1. 클라우드 관리
    * 수동
        - AWS 관리 콘솔
        - AWS API
        - AWS CLI
    * 자동
        - AWS CloudFormation(Infrastructure as Code; 소스 제어 시스템에 저장된 템플릿)
            # Infrastructure as Code
                ~ 간편한 유지관리
                ~ 손쉬운 보안 설정
                ~ 신속한 설계 가능
                ~ 뛰어난 확장성
2. AWS 클라우드
    * 필요한 만큼한 사용하고 사용한 만큼만 비용 지불
    * EC2 를 활용한 서버-클라이언트 구조(클라우드 컴퓨팅 배포) 구축 가능
        - EC2(Elastic Compute Cloud) : 가상 서버
        - 클라우드 컴퓨팅 배포
            # 클라우드 배포 : 모든 리소스가 클라우드 기반
            # 온프레미스 배포 : 프라이빗 클라우드 배포, 기존 물리 방식
            # 하이브리드 배포 : 온프레미스 인프라 리소스 + 클라우드 리소스
3. 요금
    * 온디맨드
        - 사용한 만큼 지불
        - 불규칙적 단기 워크로드에 적합
    * Savings Plans
        - 사용량을 1년/3년 약정, 온디맨드 요금의 최대 72% 절감
        - 약정 사용량까지는 Savings Plans, 초과 사용량은 온디맨드
        - Cost Explorer 를 통해 사용량 분석 가능
            # Savings Plans 를 위한 맞춤 권장 사항 제공 가능
    * 예약 인스턴스
        - 온디맨드 결제 할인 옵션
        - 표준, 컨버터블 예약을 1년/3년 약정
        - 약정 기간 끝나면 온디맨드로 변환됨
    * 스팟 인스턴스
        - 미사용중인 EC2 리소스를 사용하여 온디맨드 요금의 최대 90% 절감
        - 시작/중단/종료가 자유로운 워크로드에 적합
            # 리소스가 없거나 사용불가, 수요가 늘면 인스턴스 중단될 수 있음
    * 전용 호스트
        - 물리 서버
4. EC2
    * 시작 & 연결
        - 인스턴스 시작
            # OS, APP 등이 포함된 기본 구성 템플릿 선택 가능
            # 인스턴스 유형에서 하드웨어 구성 변경 가능
            # In/Out 네트워크 트래픽 보안 설정 지정
        - 인스턴스 연결
            # 프로그램 등에 직연동하여 데이터 교환
            # 하이퍼터미널 등을 통해 인스턴스에 직접 엑세스 가능
    * 유형
        - 범용
            # 기본
        - 컴퓨팅 최적화
            # 고성능 처리
        - 메모리 최적화
            # 방대한 데이터 처리
        - 스토리지 최적화
            # 고성능 IOPS(초당 입출력 수; 스토리지 성능 지표) 처리
        - 엑셀러레이티드
            # 데이터 처리 가속화
    * EC2 Auto Scaling
        - 수평적 자동 확장 서비스
        - 동적 조정
            # 수요 변화에 동적으로 대응하여 인스턴스 추가/제거
        - 예측 조정
            # 미리 예측한 수요에 따라 인스턴스 자동 예약
        - 그룹
            # 최소 용량
                ~ 최소 인스턴스 설정
            # 희망 용량
                ~ 희망 인스턴스 설정(없으면 최소 용량과 동일)
            # 최대 용량
                ~ 최대 인스턴스 설정(필요시 자동 확장되는 범위)
    * ELB(Elastic Load Blancing)
        - '외부 트래픽 > ELB > Auto Scaling' 구조
        - 프론트앤드는 물론 백앤드에서도 적용되는 리전 형태
    * SQS(Simple Queue Service)
        - 모놀리식 애플리케이션 서비스의 단점
            # 밀결합된 구성요소 구조로 한 요소의 장애가 전체 장애로 발전 가능
        - 마이크로 애플리케이션 서비스 접근 방식 사용
            # 구성요소 간의 Payload(데이터가 포함된 메시지) 전송/처리 보조
            # 대기열(Queue) 방식으로 메시지를 전송/저장/검색 가능
    * SNS(Simple Notification Service)
        - 게시/구독 서비스
            # 게시자는 그룹화된 주제에 따라 메시지 전달
            # 구독자는 구독한 그룹의 주제에 따라 메시지 수신
                ~ 일반 사용자(A2P), 다른 애플리케이션(A2A)
5. Serverless Computing
    * EC2 는 지속적으로 인스턴스 관리를 해줘야하는 번거로움이 있음
    * 오로지 애플리케이션(코딩)만 신경쓰고 나머지는 자동으로 처리
    * Lambda 서비스
        - 단순 서비스(코드)만 실행할 수 있는 서비스
            # 이벤트 소스에서 트리거되도록 설정하여 필요시에만 실행되게 함
        - 서비스(코드)를 실행한 동안만 요금 부과
    * ECS(Elastic Contrainer Service)
        - Docker 를 사용한 컨테이너 관리 서비스
            # Container 란 애플리케이션 코드, 종속성을 하나의 객체로 패키지한 것
        - EC2 에서도 사용 가능
    * EKS(Elastic Kubernetes Service)
        - Kubernetes 를 사용한 컨테이너 관리 서비스
        - EC2 에서도 사용 가능
    * Fargate
        - 컨테이너 서비스(ECS, EKS)에 적합한 컴퓨팅 시스템
6. 