1. 테라폼(Terraform)
    * 클라우드 및 온프레미스(On-Premises) 리소스를 효율적으로 빌드, 변경 및 버전화하는 IaC 도구
    * 동작 원리
        - API 를 통해 플랫폼 및 기타 서비스에 리소스를 생성, 관리
            # 서비스 제공업체의 엑세스 가능한 API 를 통해서 거의 모든 플랫폼 또는 서비스 동작 가능
                ~ AWS, K8S, Github 등...
            # 물리적 시스템, VM, N/W 스위치, 컨테이너 같은 리소스를 프로비저닝, 업데이트, 파괴
        - 구성(Configuration)
            # 테라폼 용으로 작성된 코드
        - 공급자(Providers)
            # 리소스를 관리하는 데 사용하는 플러그인
        - 모듈(Modules)
            # 재사용 가능한 미리 작성된 테라폼 구성
        - 레지스트리(Registry)
            # 테라폼 모듈, 공급자를 쉽게 사용할 수 있도록 자동으로 추가/구성
                ~ terraform init CMD 를 통해서 필요한 모든 걸 자동 다운로드 시작
    * 테라폼 WorkFlow
        - 쓰기(Write) : 배포 구성 생성(create)
            # vi test.tf
        - 계획(Plan) : 생성된 구성 실행 계획 점검(syntax-check)
            # terraform plan
        - 적용(Apply) : 리소스 종속성을 고려하여 순서대로 작업 수행(run)
            # terraform apply
    * 테라폼 구성 요소
        - provider : 생성할 인프라 종류(ex. aws, google...)
            # provider "aws" {
                region = "ap-northeast-2"
              }
        - resource : 실제로 생성할 인프라 자원(ex. aws_vpc, aws_ec2...)
            # resource "aws_vpc" {
                cidr_block = "10.0.0.0/16"
              }
        - state : 생성할 자원의 상태 정의(ex. version, serial, outputs...) --> '.tfstate' 확장자
            # {
                "version": 4,
                "serial": 36
              }
        - output : 생성할 자원을 변수 형태의 key = value 로 state 에 저장
            # output "cidr_block" {
                value = aws_vpc.default.cidr_block
              }
        - module : 공통적으로 사용할 수 있는 코드를 모듈로써 정의하려고 할 때
            # module "vpc" {
                source = "../_modules/vpc"
                cidr_block = "10.0.0.0/16"
              }
        - remote : output 변수 등 다른 경로의 state 를 참조
            # data "terraform_remote_state" "vpc" {
                backend = "remote"
                config = {
                  bucket = "terraform-s3-bucket"
                  region = "ap-northeast-2"
                  key = "terraform/vpc/terraform.tfstate"  
                }
              }
    * 테라폼 주요 CMD
        - init(초기화), plan(점검), apply(자원생성)
        - import(자원 -> 파일), state(파일관리), destroy(자원삭제)
    * 테라폼 설치
        - 윈도우(choco 설치 후 terraform 설치)
            # powershell(관리자모드) 실행
            # Set-ExecutionPolicy Bypass -Scope Process -Force; \
              [System.Net.ServicePointManager]::SecurityProtocol = \
              [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
              iex ((New-Object System.Net.WebClient).DownloadString\
              ('https://community.chocolatey.org/install.ps1'))
            # choco -v
            # choco install terraform
            # terraform -help
        - 리눅스(yum-utils, repository 설치 후 terraform 설치)
            # sudo yum install -y yum-utils
            # sudo yum-config-manager \
              --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
            # sudo yum install -y terraform
2. HCL(HashiCorp Configuration Language)
    * 주요 형식
    =====================================================================================
    // 한줄 주석 방법1
    # 한줄 주석 방법2
    
    /* 
    여러줄 
    주석 
    라인 
    */
    
    locals {
      key1 =      "value1"   	// = 를 기준으로 키와 값이 구분됩니다.
      key2     = "value2"    	// = 양쪽의 공백은 중요하지 않습니다.
      myStr = "TF ♡ UTF-8" 	// UTF-8 문자를 지원합니다.(ex: ko_KR.UTF-8)
      multiStr = <<FOO     	// <<EOF 같은 여러줄의 스트링을 지원합니다.
      Multi
      Line
      String
      with <<ANYTEXT
      FOO                  		// 앞과 끝 문자만 같으면 됩니다.
    
      boolean1 = true      	// boolean true
      boolean2 = false     	// boolean false를 지원합니다.
    
      deciaml = 123        	// 기본적으로 숫자는 10진수,
      octal = 0123         	// 0으로 시작하는 숫자는 8진수,
      hexadecimal = "0xD5" 	// 0x 값을 포함하는 스트링은 16진수,
      scientific = 1e10    	// 과학표기법도 지원합니다.
    
      //funtion 들이 많이 준비되어있습니다.
      myprojectname = format("%s is myproject name", var.project)
      //인라인(inline) 조건문도 지원합니다.
      credentials = var.credentials == "" ? file(var.credentials_file) : var.credentials
    }
    =====================================================================================
    * 변수
        - 입력 변수 : 어떤 함수에 인자(element) 값
        - 출력 변수 : 어떤 함수의 출력(output) 값
        - 지역 변수 : 특정 area 의 임시적인 값
    * 변수 사용
        - 테라폼 파일(.tf) 내에서 사용할 경우  --> parameter = var.<변수이름>
            # 변수 파일을 생성하고 그 파일을 참조할 경우 main.tf 와 variable.tf 은 동일 디렉토리에 있어야함
        - 문자열 내에서 사용할 경우  --> ${변수이름}
        - 변수에서 default 값을 지정하지 않으면 terraform apply 시 대화형 프롬프트로 변수 인자값을 요구함
            # 동일 디렉토리 내 .tfvars 파일 안에서 입력 변수에 해당하는 값들을 미리 정의 가능
    * 변수 형식
        - vi variables.tf
        =====================================================================================
        variable "number_example" {
          description = "An example of a number variable in Terraform"
          type        = number
          default     = 42
        }
    
        variable "list_example" {
          description = "An example of a list in Terraform"
          type        = list
          default     = ["a", "b", "c"]
        }
    
        variable "list_number_example" {
          description = "An example of a number list in Terraform"
          type        = list(number)
          default     = [1, 2, 3]
        }
    
        variable "map_example" {
          description = "An example of a map in Terraform"
          type        = map(string)
          default     = {
            key1 = "value1"
            key2 = "value2"
            key3 = "value3"
          }
        }
    
        variable "object_example" {
          description = "An example of a structural type in Terraform"
          type        = object ({
            name      = string
            age       = number
            tags      = list(string)
            enabled   = bool
          })
          default     = {
            name      = "kim"
            age       = 32
            tags      = ["a", "b", "c"]
            enabled   = true
          }
        }
    
        variable "server_port" {
          description = "The Port the server will use for HTTP requests"
          type        = number
          default     = 8080
        }
    
        output "public ip" {
          description = "The public IP address of the web server in AWS"
          value       = aws_instance.example.public_ip
        }
        - vi terraform.tfvars
        =====================================================================================
        resource_tags = {
          project     = "new-project",
          environment = "test",
          owner       = "me@example.com"
        }
    
        ec2_instance_type = "t2.micro"
    
        instance_count = 3
        =====================================================================================
3. AWS 구성
    * 계정 정보
        - Root : vataltrick@naver.com
        - URL : https://soldeskkdh.signin.aws.amazon.com/console
        - IAM : terraform.user01
        - PW : Soldesk1.
        - Access|Secret Access Key : AWS IAM 사용자 별 엑세스 키 생성 시 확인 가능
            # 이 키값을 여기에 저장하면 AWS health dashboard 에서 경고 뜨면서 계정 권한 잠김
        - Region : us-east-2(ohio) --> Cloudshell 지원 리전(ap-northeast-1(도쿄) 리전도 지원)
4. 테라폼 및 필수 패키지 설치
    * 패키지 설치
        - sudo yum install -y yum-utils
        - sudo yum-config-manager \
          --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
        - sudo yum install -y terraform
        - terraform -version
    * 테라폼 CMD 자동완성 설정
        - terraform -install-autocomplete  --> ~/.bashrc 에 자동완성 설정 추가됨
        - source ~/.bashrc
    * AWS CLI 설치
        - 적당한 디렉토리 이동
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
          -o "awscliv2.zip"
        - unzip awscli2.zip
        - sudo ./aws/install
        - aws --version
    * Host OS(Linux) 의 Terraform 에서 AWS CLI 접근
        - aws configure
            # access key, secret access key 입력 후 us-ease-2, json 입력
                ~ ~/.bashrc 에서 export 로 access key, secret access key 값을 변수로 지정해도 가능
                ~ 명령어로 설정하는걸 권장
        - aws configure list
            # 만약 설정값이 리스트업 안된다면, ~/.bashrc 에 변수값 설정해줘야 정상 표기됨
    * VScode 에서 terraform - awscli 연동
        - VScode extension 설치
            # AWS toolkit, terraform, terraform autocomplete
        - AWS toolkit 설정
            # Connect to AWS..
            # profile:default 선택
                ~ 정상 접속 시 EXPLORER 창에 AWS 리소스 확인 가능
5. 테라폼 예제
    * 단일 웹 서버 배포
        - vi main.tf
        =============
        provider "aws" {
          region = "us-east-2"
        }

        resource "aws_instance" "example" {
          ami                    = "ami-0fb653ca2d3203ac1"  --> AWS AMI 카탈로그에서 검색
          instance_type          = "t2.micro"
          vpc_security_group_ids = [aws_security_group.instance.id]

          user_data = <<-EOF
                      #!/bin/bash
                      echo "Hello, World" > index.html
                      nohup busybox httpd -f -p 8080 &
                      EOF

          user_data_replace_on_change = true

          tags = {
            Name = "terraform-example"
          }
        }

        resource "aws_security_group" "instance" {
        
          name = var.security_group_name  --> 출력 변수를 통해 인자 전달받음

          ingress {
            from_port   = 8080
            to_port     = 8080
            protocol    = "tcp"
            cidr_blocks = ["0.0.0.0/0"]
          }
        }

        variable "security_group_name" {
          description = "The name of the security group"
          type        = string
          default     = "terraform-example-instance"
        }

        output "public_ip" {  --> terraform apply 시 해당 내용에 대한 결과값을 출력
          description = "The public IP address of the instance"
          value       = aws_instance.example.public_ip  --> terraform state show aws_instance.example
        }
        =============
    * private,public subnet + nat/vgw + ec2/elb SG 포함된 ec2 인스턴스 구축
        - vi main.tf
        =============
        terraform {
          required_providers {
            aws = {
              source = "hashicorp/aws"
            }
          }
        }

        provider "aws" {
          region  = var.aws_region
        }

        data "aws_availability_zones" "available" {
          state = "available"
        }

        module "vpc" {
          source  = "terraform-aws-modules/vpc/aws"
          version = "2.64.0"

          cidr = var.vpc_cidr_block

          azs             = data.aws_availability_zones.available.names
          private_subnets = slice(var.private_subnet_cidr_blocks, 0, var.private_subnet_count)
          public_subnets  = slice(var.public_subnet_cidr_blocks, 0, var.public_subnet_count)

          enable_nat_gateway = true
          enable_vpn_gateway = var.enable_vpn_gateway

          tags = var.resource_tags
        }

        module "app_security_group" {
          source  = "terraform-aws-modules/security-group/aws//modules/web"
          version = "3.17.0"

          name        = "web-sg-project-alpha-dev"
          description = "Security group for web-servers with HTTP ports open within VPC"
          vpc_id      = module.vpc.vpc_id

          ingress_cidr_blocks = module.vpc.public_subnets_cidr_blocks

          tags = var.resource_tags
        }

        module "lb_security_group" {
          source  = "terraform-aws-modules/security-group/aws//modules/web"
          version = "3.17.0"

          name        = "lb-sg-project-alpha-dev"
          description = "Security group for load balancer with HTTP ports open within VPC"
          vpc_id      = module.vpc.vpc_id

          ingress_cidr_blocks = ["0.0.0.0/0"]

          tags = var.resource_tags
        }

        resource "random_string" "lb_id" {
          length  = 3
          special = false
        }

        module "elb_http" {
          source  = "terraform-aws-modules/elb/aws"
          version = "2.4.0"

          # Ensure load balancer name is unique
          name = "lb-${random_string.lb_id.result}-project-alpha-dev"

          internal = false

          security_groups = [module.lb_security_group.this_security_group_id]
          subnets         = module.vpc.public_subnets

          number_of_instances = length(module.ec2_instances.instance_ids)
          instances           = module.ec2_instances.instance_ids

          listener = [{
            instance_port     = "80"
            instance_protocol = "HTTP"
            lb_port           = "80"
            lb_protocol       = "HTTP"
          }]

          health_check = {
            target              = "HTTP:80/index.html"
            interval            = 10
            healthy_threshold   = 3
            unhealthy_threshold = 10
            timeout             = 5
          }

          tags = var.resource_tags
        }

        module "ec2_instances" {
          source = "./modules/aws-instance"

          instance_count     = var.instance_count
          instance_type      = var.ec2_instance_type
          subnet_ids         = module.vpc.private_subnets[*]
          security_group_ids = [module.app_security_group.this_security_group_id]

          tags = var.resource_tags
        }
        =============
    * ASG launch configuartion 생성 및 수명주기 설정
        - vi main.tf
            # ASG 의 시작 구성은 변경될 수 없으나 테라폼에서 변경 시 apply 가 안되는 에러 발생
            # create_before_destroy 옵션의 수명주기 설정을 사용하여 에러 상쇄 가능
                ~ 테라폼에서의 변경점 적용 순서 : 이전 리소스 삭제 -> 변경 리소스 신규 생성
                ~ 옵션 적용 : 변경 리소스 우선 생성 -> 이전 리소스 참조를 신규 리소스로 변경 후 삭제
        =============
        resource "aws_autoscaling_group" "example" {
          launch_configuration = aws_launch_configuration.example.name
          vpc_zone_identifier  = data.aws_subnets.default.ids

          target_group_arns = [aws_lb_target_group.asg.arn]
          health_check_type = "ELB"

          min_size = 2
          max_size = 10

          tag {
            key                 = "Name"
            value               = "terraform-asg-example"
            propagate_at_launch = true
          }

          lifecycle {
            create_before_destroy = true
          }
        }
        =============