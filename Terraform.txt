1. 테라폼(Terraform)
    * 클라우드 및 온프레미스(On-Premises) 리소스를 효율적으로 빌드, 변경 및 버전화하는 IaC 도구
    * 동작 원리
        - API 를 통해 플랫폼 및 기타 서비스에 리소스를 생성, 관리
            # 서비스 제공업체의 엑세스 가능한 API 를 통해서 거의 모든 플랫폼 또는 서비스 동작 가능
                ~ AWS, K8S, Github 등...
            # 물리적 시스템, VM, N/W 스위치, 컨테이너 같은 리소스를 프로비저닝, 업데이트, 파괴
        - 구성(Configuration)
            # 테라폼 용으로 작성된 코드
        - 공급자(Providers)
            # 리소스를 관리하는 데 사용하는 플러그인
        - 모듈(Modules)
            # 재사용 가능한 미리 작성된 테라폼 구성
        - 레지스트리(Registry)
            # 테라폼 모듈, 공급자를 쉽게 사용할 수 있도록 자동으로 추가/구성
                ~ terraform init CMD 를 통해서 필요한 모든 걸 자동 다운로드 시작
    * 테라폼 WorkFlow
        - 쓰기(Write) : 배포 구성 생성(create)
            # vi test.tf
        - 계획(Plan) : 생성된 구성 실행 계획 점검(syntax-check)
            # terraform plan
        - 적용(Apply) : 리소스 종속성을 고려하여 순서대로 작업 수행(run)
            # terraform apply
    * 테라폼 구성 요소
        - provider : 생성할 인프라 종류(ex. aws, google...)
            # provider "aws" {
                region = "ap-northeast-2"
              }
        - resource : 실제로 생성할 인프라 자원(ex. aws_vpc, aws_ec2...)
            # resource "aws_vpc" {
                cidr_block = "10.0.0.0/16"
              }
        - state : 생성할 자원의 상태 정의(ex. version, serial, outputs...) --> '.tfstate' 확장자
            # {
                "version": 4,
                "serial": 36
              }
        - output : 생성할 자원을 변수 형태의 key = value 로 state 에 저장
            # output "cidr_block" {
                value = aws_vpc.default.cidr_block
              }
        - module : 공통적으로 사용할 수 있는 코드를 모듈로써 정의하려고 할 때
            # module "vpc" {
                source = "../_modules/vpc"
                cidr_block = "10.0.0.0/16"
              }
        - remote : output 변수 등 다른 경로의 state 를 참조
            # data "terraform_remote_state" "vpc" {
                backend = "remote"
                config = {
                  bucket = "terraform-s3-bucket"
                  region = "ap-northeast-2"
                  key = "terraform/vpc/terraform.tfstate"  
                }
              }
    * 테라폼 주요 CMD
        - init(초기화), plan(점검), apply(자원생성)
        - import(자원 -> 파일), state(파일관리), destroy(자원삭제)
    * 테라폼 설치
        - 윈도우(choco 설치 후 terraform 설치)
            # powershell(관리자모드) 실행
            # Set-ExecutionPolicy Bypass -Scope Process -Force; \
              [System.Net.ServicePointManager]::SecurityProtocol = \
              [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
              iex ((New-Object System.Net.WebClient).DownloadString\
              ('https://community.chocolatey.org/install.ps1'))
            # choco -v
            # choco install terraform
            # terraform -help
        - 리눅스(yum-utils, repository 설치 후 terraform 설치)
            # sudo yum install -y yum-utils
            # sudo yum-config-manager \
              --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
            # sudo yum install -y terraform
2. HCL(HashiCorp Configuration Language)
    * 테라폼에서 사용하는 구성 언어로 JSON 구문으로 작성된 인프라 구성 파일 필요
    =====================================================================================
    // 한줄 주석 방법1
    # 한줄 주석 방법2
    
    /* 
    여러줄 
    주석 
    라인 
    */
    
    locals {
      key1 =      "value1"   	// = 를 기준으로 키와 값이 구분됩니다.
      key2     = "value2"    	// = 양쪽의 공백은 중요하지 않습니다.
      myStr = "TF ♡ UTF-8" 	// UTF-8 문자를 지원합니다.(ex: ko_KR.UTF-8)
      multiStr = <<FOO     	// <<EOF 같은 여러줄의 스트링을 지원합니다.
      Multi
      Line
      String
      with <<ANYTEXT
      FOO                  		// 앞과 끝 문자만 같으면 됩니다.
    
      boolean1 = true      	// boolean true
      boolean2 = false     	// boolean false를 지원합니다.
    
      deciaml = 123        	// 기본적으로 숫자는 10진수,
      octal = 0123         	// 0으로 시작하는 숫자는 8진수,
      hexadecimal = "0xD5" 	// 0x 값을 포함하는 스트링은 16진수,
      scientific = 1e10    	// 과학표기법도 지원합니다.
    
      //funtion 들이 많이 준비되어있습니다.
      myprojectname = format("%s is myproject name", var.project)
      //인라인(inline) 조건문도 지원합니다.
      credentials = var.credentials == "" ? file(var.credentials_file) : var.credentials
    }
    =====================================================================================
3. AWS 구성
    * 계정 정보
        - Root : vataltrick@naver.com
        - URL : https://soldeskkdh.signin.aws.amazon.com/console
        - IAM : terraform.user01
        - PW : Soldesk1.
        - Access Key : AKIAQ7APKNNQQUV3TCNR
        - Region : us-east-2(ohio) --> Cloudshell 지원 리전(ap-northeast-1(도쿄) 리전도 지원)
4. 테라폼 및 필수 패키지 설치
    * 패키지 설치
        - sudo yum install -y yum-utils
        - sudo yum-config-manager \
          --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
        - sudo yum install -y terraform
        - terraform -version
    * 테라폼 CMD 자동완성 설정
        - terraform -install-autocomplete  --> ~/.bashrc 에 자동완성 설정 추가됨
        - source ~/.bashrc
    * AWS CLI 설치
        - 적당한 디렉토리 이동
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
          -o "awscliv2.zip"
        - unzip awscli2.zip
        - sudo ./aws/install
        - aws --version